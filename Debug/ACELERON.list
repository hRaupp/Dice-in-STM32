
ACELERON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ac  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008824  08008824  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800882c  0800882c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800882c  0800882c  0001882c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000080  080088b4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  080088b4  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135ab  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d2  00000000  00000000  0003365b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00036030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00037148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239a1  00000000  00000000  00038150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e56  00000000  00000000  0005baf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e4a  00000000  00000000  00071947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005510  00000000  00000000  001467e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0014bcf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0014bd18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007160 	.word	0x08007160

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007160 	.word	0x08007160

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b974 	b.w	8000f0c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468e      	mov	lr, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14d      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	d969      	bls.n	8000d24 <__udivmoddi4+0xe8>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b152      	cbz	r2, 8000c6c <__udivmoddi4+0x30>
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	f1c2 0120 	rsb	r1, r2, #32
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c66:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	0c21      	lsrs	r1, r4, #16
 8000c72:	fbbe f6f8 	udiv	r6, lr, r8
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c82:	fb06 f107 	mul.w	r1, r6, r7
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c92:	f080 811f 	bcs.w	8000ed4 <__udivmoddi4+0x298>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 811c 	bls.w	8000ed4 <__udivmoddi4+0x298>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 f707 	mul.w	r7, r0, r7
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x92>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc0:	f080 810a 	bcs.w	8000ed8 <__udivmoddi4+0x29c>
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	f240 8107 	bls.w	8000ed8 <__udivmoddi4+0x29c>
 8000cca:	4464      	add	r4, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	1be4      	subs	r4, r4, r7
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa4>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0xc2>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80ef 	beq.w	8000ece <__udivmoddi4+0x292>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x160>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xd4>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80f9 	bhi.w	8000f02 <__udivmoddi4+0x2c6>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0303 	sbc.w	r3, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e0      	beq.n	8000ce0 <__udivmoddi4+0xa4>
 8000d1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d22:	e7dd      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xec>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f040 8092 	bne.w	8000e56 <__udivmoddi4+0x21a>
 8000d32:	eba1 010c 	sub.w	r1, r1, ip
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	2601      	movs	r6, #1
 8000d40:	0c20      	lsrs	r0, r4, #16
 8000d42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d46:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4e:	fb0e f003 	mul.w	r0, lr, r3
 8000d52:	4288      	cmp	r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x12c>
 8000d56:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x12a>
 8000d60:	4288      	cmp	r0, r1
 8000d62:	f200 80cb 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d70:	fb07 1110 	mls	r1, r7, r0, r1
 8000d74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d78:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x156>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x154>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2ca>
 8000d90:	4608      	mov	r0, r1
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	e79c      	b.n	8000cd6 <__udivmoddi4+0x9a>
 8000d9c:	f1c6 0720 	rsb	r7, r6, #32
 8000da0:	40b3      	lsls	r3, r6
 8000da2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000daa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	40f9      	lsrs	r1, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc2:	0c20      	lsrs	r0, r4, #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dda:	d90b      	bls.n	8000df4 <__udivmoddi4+0x1b8>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de4:	f080 8088 	bcs.w	8000ef8 <__udivmoddi4+0x2bc>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f240 8085 	bls.w	8000ef8 <__udivmoddi4+0x2bc>
 8000dee:	f1a8 0802 	sub.w	r8, r8, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000e00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1e2>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e14:	d26c      	bcs.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d96a      	bls.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e22:	fba0 9402 	umull	r9, r4, r0, r2
 8000e26:	eba1 010e 	sub.w	r1, r1, lr
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	46c8      	mov	r8, r9
 8000e2e:	46a6      	mov	lr, r4
 8000e30:	d356      	bcc.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e32:	d053      	beq.n	8000edc <__udivmoddi4+0x2a0>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x212>
 8000e36:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e42:	fa22 f306 	lsr.w	r3, r2, r6
 8000e46:	40f1      	lsrs	r1, r6
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa21 f303 	lsr.w	r3, r1, r3
 8000e64:	4091      	lsls	r1, r2
 8000e66:	4301      	orrs	r1, r0
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e74:	fb07 3610 	mls	r6, r7, r0, r3
 8000e78:	0c0b      	lsrs	r3, r1, #16
 8000e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e82:	429e      	cmp	r6, r3
 8000e84:	fa04 f402 	lsl.w	r4, r4, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x260>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e92:	d22f      	bcs.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e94:	429e      	cmp	r6, r3
 8000e96:	d92d      	bls.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1b9b      	subs	r3, r3, r6
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eac:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x28a>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ebc:	d216      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d914      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ecc:	e738      	b.n	8000d40 <__udivmoddi4+0x104>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e705      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e3      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6f8      	b.n	8000cce <__udivmoddi4+0x92>
 8000edc:	454b      	cmp	r3, r9
 8000ede:	d2a9      	bcs.n	8000e34 <__udivmoddi4+0x1f8>
 8000ee0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7a3      	b.n	8000e34 <__udivmoddi4+0x1f8>
 8000eec:	4646      	mov	r6, r8
 8000eee:	e7ea      	b.n	8000ec6 <__udivmoddi4+0x28a>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	e794      	b.n	8000e1e <__udivmoddi4+0x1e2>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e7d1      	b.n	8000e9c <__udivmoddi4+0x260>
 8000ef8:	46d0      	mov	r8, sl
 8000efa:	e77b      	b.n	8000df4 <__udivmoddi4+0x1b8>
 8000efc:	3b02      	subs	r3, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e732      	b.n	8000d68 <__udivmoddi4+0x12c>
 8000f02:	4630      	mov	r0, r6
 8000f04:	e709      	b.n	8000d1a <__udivmoddi4+0xde>
 8000f06:	4464      	add	r4, ip
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x156>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a32      	ldr	r2, [pc, #200]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_GPIO_Init+0xe8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4818      	ldr	r0, [pc, #96]	; (8000ffc <MX_GPIO_Init+0xec>)
 8000f9c:	f001 fd84 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4812      	ldr	r0, [pc, #72]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000fb8:	f001 fbca 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <MX_GPIO_Init+0xec>)
 8000fd4:	f001 fbbc 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOT1_Pin;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOT1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000fec:	f001 fbb0 	bl	8002750 <HAL_GPIO_Init>

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020800 	.word	0x40020800
 8001004:	40020400 	.word	0x40020400

08001008 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x50>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <MX_I2C1_Init+0x54>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x50>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_I2C1_Init+0x58>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_I2C1_Init+0x50>)
 8001026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_I2C1_Init+0x50>)
 8001046:	f001 fd49 	bl	8002adc <HAL_I2C_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001050:	f000 fc88 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000009c 	.word	0x2000009c
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_I2C2_Init+0x50>)
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <MX_I2C2_Init+0x54>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_I2C2_Init+0x50>)
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_I2C2_Init+0x58>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_I2C2_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_I2C2_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_I2C2_Init+0x50>)
 8001082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001086:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_I2C2_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_I2C2_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_I2C2_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_I2C2_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_I2C2_Init+0x50>)
 80010a2:	f001 fd1b 	bl	8002adc <HAL_I2C_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010ac:	f000 fc5a 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000f0 	.word	0x200000f0
 80010b8:	40005800 	.word	0x40005800
 80010bc:	00061a80 	.word	0x00061a80

080010c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a42      	ldr	r2, [pc, #264]	; (80011e8 <HAL_I2C_MspInit+0x128>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12c      	bne.n	800113c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a40      	ldr	r2, [pc, #256]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fe:	23c0      	movs	r3, #192	; 0xc0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001102:	2312      	movs	r3, #18
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110e:	2304      	movs	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4835      	ldr	r0, [pc, #212]	; (80011f0 <HAL_I2C_MspInit+0x130>)
 800111a:	f001 fb19 	bl	8002750 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b32      	ldr	r3, [pc, #200]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a31      	ldr	r2, [pc, #196]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 8001128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800113a:	e050      	b.n	80011de <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2c      	ldr	r2, [pc, #176]	; (80011f4 <HAL_I2C_MspInit+0x134>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d14b      	bne.n	80011de <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001190:	2304      	movs	r3, #4
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <HAL_I2C_MspInit+0x130>)
 800119c:	f001 fad8 	bl	8002750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	2312      	movs	r3, #18
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011b2:	2304      	movs	r3, #4
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	480e      	ldr	r0, [pc, #56]	; (80011f8 <HAL_I2C_MspInit+0x138>)
 80011be:	f001 fac7 	bl	8002750 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 80011cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_I2C_MspInit+0x12c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40005800 	.word	0x40005800
 80011f8:	40020800 	.word	0x40020800

080011fc <MPU6050_Init>:
/* USER CODE BEGIN 0 */

//============================= Funcoes acelerometro =======================//

void MPU6050_Init (void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af04      	add	r7, sp, #16

	// Enviando o WHO AM I
	HAL_I2C_Mem_Read (&hi2c1, 0xD0, 0X75,1, &check, 1, 1000);
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MPU6050_Init+0xac>)
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2275      	movs	r2, #117	; 0x75
 8001214:	21d0      	movs	r1, #208	; 0xd0
 8001216:	4825      	ldr	r0, [pc, #148]	; (80012ac <MPU6050_Init+0xb0>)
 8001218:	f001 ff9c 	bl	8003154 <HAL_I2C_Mem_Read>

	if (check == 104)  // Se retornar do who am i
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MPU6050_Init+0xac>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b68      	cmp	r3, #104	; 0x68
 8001222:	d130      	bne.n	8001286 <MPU6050_Init+0x8a>
	{
		// WAKE UP
		Data = 0;
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <MPU6050_Init+0xb4>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x6B, 1,&Data, 1, 1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MPU6050_Init+0xb4>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	226b      	movs	r2, #107	; 0x6b
 800123c:	21d0      	movs	r1, #208	; 0xd0
 800123e:	481b      	ldr	r0, [pc, #108]	; (80012ac <MPU6050_Init+0xb0>)
 8001240:	f001 fe8e 	bl	8002f60 <HAL_I2C_Mem_Write>

		// Setando DATA RATE 1KHz
		Data = 0x07;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MPU6050_Init+0xb4>)
 8001246:	2207      	movs	r2, #7
 8001248:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x19, 1, &Data, 1, 1000);
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2301      	movs	r3, #1
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MPU6050_Init+0xb4>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2219      	movs	r2, #25
 800125c:	21d0      	movs	r1, #208	; 0xd0
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <MPU6050_Init+0xb0>)
 8001260:	f001 fe7e 	bl	8002f60 <HAL_I2C_Mem_Write>

		// Setando configs do acelerometro
		Data = 0x00;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MPU6050_Init+0xb4>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0X1C, 1, &Data, 1, 1000);
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2301      	movs	r3, #1
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MPU6050_Init+0xb4>)
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	221c      	movs	r2, #28
 800127c:	21d0      	movs	r1, #208	; 0xd0
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <MPU6050_Init+0xb0>)
 8001280:	f001 fe6e 	bl	8002f60 <HAL_I2C_Mem_Write>
 8001284:	e003      	b.n	800128e <MPU6050_Init+0x92>

	}
	else // se nao retornar do who am i
		sprintf(msg, "\n\rNao deu pra ler");
 8001286:	490b      	ldr	r1, [pc, #44]	; (80012b4 <MPU6050_Init+0xb8>)
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <MPU6050_Init+0xbc>)
 800128a:	f004 fd5f 	bl	8005d4c <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen(msg), TOUT);
 800128e:	480a      	ldr	r0, [pc, #40]	; (80012b8 <MPU6050_Init+0xbc>)
 8001290:	f7fe ffbe 	bl	8000210 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	4907      	ldr	r1, [pc, #28]	; (80012b8 <MPU6050_Init+0xbc>)
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <MPU6050_Init+0xc0>)
 800129e:	f004 f942 	bl	8005526 <HAL_UART_Transmit>
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000212 	.word	0x20000212
 80012ac:	2000009c 	.word	0x2000009c
 80012b0:	20000213 	.word	0x20000213
 80012b4:	08007178 	.word	0x08007178
 80012b8:	20000144 	.word	0x20000144
 80012bc:	200006dc 	.word	0x200006dc

080012c0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read (&hi2c1, 0xD0, 0x3B, 1, Rec_Data, 6, 1000);
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2306      	movs	r3, #6
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <MPU6050_Read_Accel+0xe0>)
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	223b      	movs	r2, #59	; 0x3b
 80012d8:	21d0      	movs	r1, #208	; 0xd0
 80012da:	4832      	ldr	r0, [pc, #200]	; (80013a4 <MPU6050_Read_Accel+0xe4>)
 80012dc:	f001 ff3a 	bl	8003154 <HAL_I2C_Mem_Read>

	Acell_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <MPU6050_Read_Accel+0xe0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MPU6050_Read_Accel+0xe0>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <MPU6050_Read_Accel+0xe8>)
 80012f4:	801a      	strh	r2, [r3, #0]
	Acell_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MPU6050_Read_Accel+0xe0>)
 80012f8:	789b      	ldrb	r3, [r3, #2]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MPU6050_Read_Accel+0xe0>)
 8001300:	78db      	ldrb	r3, [r3, #3]
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MPU6050_Read_Accel+0xec>)
 800130a:	801a      	strh	r2, [r3, #0]
	Acell_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MPU6050_Read_Accel+0xe0>)
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MPU6050_Read_Accel+0xe0>)
 8001316:	795b      	ldrb	r3, [r3, #5]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MPU6050_Read_Accel+0xf0>)
 8001320:	801a      	strh	r2, [r3, #0]

//Convertendo para unidade de medida -> Datasheet
	Ax = Acell_X/16384.0;
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MPU6050_Read_Accel+0xe8>)
 8001324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f91b 	bl	8000564 <__aeabi_i2d>
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MPU6050_Read_Accel+0xf4>)
 8001334:	f7ff faaa 	bl	800088c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc14 	bl	8000b6c <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <MPU6050_Read_Accel+0xf8>)
 8001348:	6013      	str	r3, [r2, #0]
	Ay = Acell_Y/16384.0;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MPU6050_Read_Accel+0xec>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f907 	bl	8000564 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MPU6050_Read_Accel+0xf4>)
 800135c:	f7ff fa96 	bl	800088c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fc00 	bl	8000b6c <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MPU6050_Read_Accel+0xfc>)
 8001370:	6013      	str	r3, [r2, #0]
	Az = Acell_Z/16384.0;
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MPU6050_Read_Accel+0xf0>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8f3 	bl	8000564 <__aeabi_i2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MPU6050_Read_Accel+0xf4>)
 8001384:	f7ff fa82 	bl	800088c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fbec 	bl	8000b6c <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <MPU6050_Read_Accel+0x100>)
 8001398:	6013      	str	r3, [r2, #0]
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000020c 	.word	0x2000020c
 80013a4:	2000009c 	.word	0x2000009c
 80013a8:	20000214 	.word	0x20000214
 80013ac:	20000216 	.word	0x20000216
 80013b0:	20000218 	.word	0x20000218
 80013b4:	40d00000 	.word	0x40d00000
 80013b8:	2000021c 	.word	0x2000021c
 80013bc:	20000220 	.word	0x20000220
 80013c0:	20000224 	.word	0x20000224

080013c4 <escolhe>:


void escolhe (void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0


	  switch(comando){
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <escolhe+0xf8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	d873      	bhi.n	80014b8 <escolhe+0xf4>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <escolhe+0x14>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013f5 	.word	0x080013f5
 80013dc:	08001411 	.word	0x08001411
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001449 	.word	0x08001449
 80013e8:	08001465 	.word	0x08001465
 80013ec:	08001481 	.word	0x08001481
 80013f0:	0800149d 	.word	0x0800149d

	  case 0:
		  header();
 80013f4:	f000 f8c0 	bl	8001578 <header>

		  SSD1306_GotoXY (35, 30);
 80013f8:	211e      	movs	r1, #30
 80013fa:	2023      	movs	r0, #35	; 0x23
 80013fc:	f000 fc24 	bl	8001c48 <SSD1306_GotoXY>
		  SSD1306_Puts (" D4 ", &Font_11x18, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	492f      	ldr	r1, [pc, #188]	; (80014c0 <escolhe+0xfc>)
 8001404:	482f      	ldr	r0, [pc, #188]	; (80014c4 <escolhe+0x100>)
 8001406:	f000 fcb5 	bl	8001d74 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); //display
 800140a:	f000 fb77 	bl	8001afc <SSD1306_UpdateScreen>

		  break;
 800140e:	e053      	b.n	80014b8 <escolhe+0xf4>

	  case 1:

		  header();
 8001410:	f000 f8b2 	bl	8001578 <header>

		  SSD1306_GotoXY (35, 30);
 8001414:	211e      	movs	r1, #30
 8001416:	2023      	movs	r0, #35	; 0x23
 8001418:	f000 fc16 	bl	8001c48 <SSD1306_GotoXY>
		  SSD1306_Puts (" D6 ", &Font_11x18, 1);
 800141c:	2201      	movs	r2, #1
 800141e:	4928      	ldr	r1, [pc, #160]	; (80014c0 <escolhe+0xfc>)
 8001420:	4829      	ldr	r0, [pc, #164]	; (80014c8 <escolhe+0x104>)
 8001422:	f000 fca7 	bl	8001d74 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); //display
 8001426:	f000 fb69 	bl	8001afc <SSD1306_UpdateScreen>


		  break;
 800142a:	e045      	b.n	80014b8 <escolhe+0xf4>

	  case 2:

		    header();
 800142c:	f000 f8a4 	bl	8001578 <header>

		    SSD1306_GotoXY (35, 30);
 8001430:	211e      	movs	r1, #30
 8001432:	2023      	movs	r0, #35	; 0x23
 8001434:	f000 fc08 	bl	8001c48 <SSD1306_GotoXY>
		    SSD1306_Puts (" D8 ", &Font_11x18, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	4921      	ldr	r1, [pc, #132]	; (80014c0 <escolhe+0xfc>)
 800143c:	4823      	ldr	r0, [pc, #140]	; (80014cc <escolhe+0x108>)
 800143e:	f000 fc99 	bl	8001d74 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8001442:	f000 fb5b 	bl	8001afc <SSD1306_UpdateScreen>


		  break;
 8001446:	e037      	b.n	80014b8 <escolhe+0xf4>

	  case 3:

		  	header();
 8001448:	f000 f896 	bl	8001578 <header>

		    SSD1306_GotoXY (35, 30);
 800144c:	211e      	movs	r1, #30
 800144e:	2023      	movs	r0, #35	; 0x23
 8001450:	f000 fbfa 	bl	8001c48 <SSD1306_GotoXY>
		    SSD1306_Puts (" D10 ", &Font_11x18, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	491a      	ldr	r1, [pc, #104]	; (80014c0 <escolhe+0xfc>)
 8001458:	481d      	ldr	r0, [pc, #116]	; (80014d0 <escolhe+0x10c>)
 800145a:	f000 fc8b 	bl	8001d74 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 800145e:	f000 fb4d 	bl	8001afc <SSD1306_UpdateScreen>


		  break;
 8001462:	e029      	b.n	80014b8 <escolhe+0xf4>

	  case 4:

		  	header();
 8001464:	f000 f888 	bl	8001578 <header>

		    SSD1306_GotoXY (35, 30);
 8001468:	211e      	movs	r1, #30
 800146a:	2023      	movs	r0, #35	; 0x23
 800146c:	f000 fbec 	bl	8001c48 <SSD1306_GotoXY>
		    SSD1306_Puts (" D12 ", &Font_11x18, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	4913      	ldr	r1, [pc, #76]	; (80014c0 <escolhe+0xfc>)
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <escolhe+0x110>)
 8001476:	f000 fc7d 	bl	8001d74 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 800147a:	f000 fb3f 	bl	8001afc <SSD1306_UpdateScreen>


		  break;
 800147e:	e01b      	b.n	80014b8 <escolhe+0xf4>

	  case 5:

		    header();
 8001480:	f000 f87a 	bl	8001578 <header>

		    SSD1306_GotoXY (35, 30);
 8001484:	211e      	movs	r1, #30
 8001486:	2023      	movs	r0, #35	; 0x23
 8001488:	f000 fbde 	bl	8001c48 <SSD1306_GotoXY>
		    SSD1306_Puts (" D20 ", &Font_11x18, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	490c      	ldr	r1, [pc, #48]	; (80014c0 <escolhe+0xfc>)
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <escolhe+0x114>)
 8001492:	f000 fc6f 	bl	8001d74 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8001496:	f000 fb31 	bl	8001afc <SSD1306_UpdateScreen>

		  break;
 800149a:	e00d      	b.n	80014b8 <escolhe+0xf4>

	  case 6:

		  header();
 800149c:	f000 f86c 	bl	8001578 <header>

		  SSD1306_GotoXY (35, 30);
 80014a0:	211e      	movs	r1, #30
 80014a2:	2023      	movs	r0, #35	; 0x23
 80014a4:	f000 fbd0 	bl	8001c48 <SSD1306_GotoXY>
		  SSD1306_Puts ("FIM!", &Font_11x18, 1);
 80014a8:	2201      	movs	r2, #1
 80014aa:	4905      	ldr	r1, [pc, #20]	; (80014c0 <escolhe+0xfc>)
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <escolhe+0x118>)
 80014ae:	f000 fc61 	bl	8001d74 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); //display
 80014b2:	f000 fb23 	bl	8001afc <SSD1306_UpdateScreen>


		  break;
 80014b6:	bf00      	nop
	  }


}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000228 	.word	0x20000228
 80014c0:	20000008 	.word	0x20000008
 80014c4:	0800718c 	.word	0x0800718c
 80014c8:	08007194 	.word	0x08007194
 80014cc:	0800719c 	.word	0x0800719c
 80014d0:	080071a4 	.word	0x080071a4
 80014d4:	080071ac 	.word	0x080071ac
 80014d8:	080071b4 	.word	0x080071b4
 80014dc:	080071bc 	.word	0x080071bc

080014e0 <sorteia>:

void sorteia(void){
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

    switch (comando) {
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <sorteia+0x8c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d839      	bhi.n	8001560 <sorteia+0x80>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <sorteia+0x14>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	0800151b 	.word	0x0800151b
 80014fc:	08001529 	.word	0x08001529
 8001500:	08001537 	.word	0x08001537
 8001504:	08001545 	.word	0x08001545
 8001508:	08001553 	.word	0x08001553
        case 0:
            min = 1;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <sorteia+0x90>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
            max = 4;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <sorteia+0x94>)
 8001514:	2204      	movs	r2, #4
 8001516:	701a      	strb	r2, [r3, #0]
            break;
 8001518:	e022      	b.n	8001560 <sorteia+0x80>
        case 1:
            min = 1;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <sorteia+0x90>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
            max = 6;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <sorteia+0x94>)
 8001522:	2206      	movs	r2, #6
 8001524:	701a      	strb	r2, [r3, #0]
            break;
 8001526:	e01b      	b.n	8001560 <sorteia+0x80>
        case 2:
            min = 1;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <sorteia+0x90>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
            max = 8;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <sorteia+0x94>)
 8001530:	2208      	movs	r2, #8
 8001532:	701a      	strb	r2, [r3, #0]
            break;
 8001534:	e014      	b.n	8001560 <sorteia+0x80>
        case 3:
            min = 1;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <sorteia+0x90>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
            max = 10;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <sorteia+0x94>)
 800153e:	220a      	movs	r2, #10
 8001540:	701a      	strb	r2, [r3, #0]
            break;
 8001542:	e00d      	b.n	8001560 <sorteia+0x80>
        case 4:
            min = 1;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <sorteia+0x90>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
            max = 12;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <sorteia+0x94>)
 800154c:	220c      	movs	r2, #12
 800154e:	701a      	strb	r2, [r3, #0]
            break;
 8001550:	e006      	b.n	8001560 <sorteia+0x80>
        case 5:
            min = 1;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <sorteia+0x90>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
            max = 20;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <sorteia+0x94>)
 800155a:	2214      	movs	r2, #20
 800155c:	701a      	strb	r2, [r3, #0]
            break;
 800155e:	bf00      	nop
    }


}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000228 	.word	0x20000228
 8001570:	2000023a 	.word	0x2000023a
 8001574:	2000023b 	.word	0x2000023b

08001578 <header>:

void header(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0

	  //////HEADER//////////
	  SSD1306_GotoXY (15,0);
 800157c:	2100      	movs	r1, #0
 800157e:	200f      	movs	r0, #15
 8001580:	f000 fb62 	bl	8001c48 <SSD1306_GotoXY>
	  SSD1306_Puts ("Raupp & Trento", &Font_7x10, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	4904      	ldr	r1, [pc, #16]	; (8001598 <header+0x20>)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <header+0x24>)
 800158a:	f000 fbf3 	bl	8001d74 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 800158e:	f000 fab5 	bl	8001afc <SSD1306_UpdateScreen>

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000
 800159c:	080071c4 	.word	0x080071c4

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f000 ff50 	bl	8002448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f8f6 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff fcb0 	bl	8000f10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015b0:	f000 feae 	bl	8002310 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015b4:	f7ff fd28 	bl	8001008 <MX_I2C1_Init>
  MX_I2C2_Init();
 80015b8:	f7ff fd54 	bl	8001064 <MX_I2C2_Init>
  MX_TIM1_Init();
 80015bc:	f000 fde4 	bl	8002188 <MX_TIM1_Init>
  MX_TIM11_Init();
 80015c0:	f000 fe34 	bl	800222c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80015c4:	4862      	ldr	r0, [pc, #392]	; (8001750 <main+0x1b0>)
 80015c6:	f003 fb2f 	bl	8004c28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80015ca:	4862      	ldr	r0, [pc, #392]	; (8001754 <main+0x1b4>)
 80015cc:	f003 fb2c 	bl	8004c28 <HAL_TIM_Base_Start_IT>


  srand(time(NULL));
 80015d0:	2000      	movs	r0, #0
 80015d2:	f004 fbdb 	bl	8005d8c <time>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4613      	mov	r3, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 fb49 	bl	8005c74 <srand>

  MPU6050_Init();
 80015e2:	f7ff fe0b 	bl	80011fc <MPU6050_Init>

  SSD1306_Init();  //inicia o display
 80015e6:	f000 f9c5 	bl	8001974 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(modo){
 80015ea:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <main+0x1b8>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d078      	beq.n	80016e4 <main+0x144>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	dcf9      	bgt.n	80015ea <main+0x4a>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <main+0x60>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d017      	beq.n	800162e <main+0x8e>
 80015fe:	e7f4      	b.n	80015ea <main+0x4a>

		  case CONFIGURANDO:

			  escolhe();
 8001600:	f7ff fee0 	bl	80013c4 <escolhe>

			  if(comando_hold >= TEMPO_BOT){ // Mantem pressionado por 3 segundos ou mais
 8001604:	4b55      	ldr	r3, [pc, #340]	; (800175c <main+0x1bc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	f240 8099 	bls.w	8001740 <main+0x1a0>
				  comando = comando - 1;
 800160e:	4b54      	ldr	r3, [pc, #336]	; (8001760 <main+0x1c0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3b01      	subs	r3, #1
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b52      	ldr	r3, [pc, #328]	; (8001760 <main+0x1c0>)
 8001618:	701a      	strb	r2, [r3, #0]
				  bsubida = 0;
 800161a:	4b52      	ldr	r3, [pc, #328]	; (8001764 <main+0x1c4>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
				  comando_hold = 0;
 8001620:	4b4e      	ldr	r3, [pc, #312]	; (800175c <main+0x1bc>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
				  modo = SORTEANDO;
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <main+0x1b8>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
			  }

			  break;
 800162c:	e088      	b.n	8001740 <main+0x1a0>

		  case SORTEANDO:

			  	sorteia();
 800162e:	f7ff ff57 	bl	80014e0 <sorteia>

				SSD1306_GotoXY (28, 30);
 8001632:	211e      	movs	r1, #30
 8001634:	201c      	movs	r0, #28
 8001636:	f000 fb07 	bl	8001c48 <SSD1306_GotoXY>
				SSD1306_Puts ("SACUDA!", &Font_11x18, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	494a      	ldr	r1, [pc, #296]	; (8001768 <main+0x1c8>)
 800163e:	484b      	ldr	r0, [pc, #300]	; (800176c <main+0x1cc>)
 8001640:	f000 fb98 	bl	8001d74 <SSD1306_Puts>
				SSD1306_UpdateScreen(); //display
 8001644:	f000 fa5a 	bl	8001afc <SSD1306_UpdateScreen>


			    srand(conta);
 8001648:	4b49      	ldr	r3, [pc, #292]	; (8001770 <main+0x1d0>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fb11 	bl	8005c74 <srand>
			    numerogrande = rand();
 8001652:	f004 fb3d 	bl	8005cd0 <rand>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <main+0x1d4>)
 800165c:	601a      	str	r2, [r3, #0]
			    numero_aleatorio = numerogrande % max;
 800165e:	4b45      	ldr	r3, [pc, #276]	; (8001774 <main+0x1d4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a45      	ldr	r2, [pc, #276]	; (8001778 <main+0x1d8>)
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	fbb3 f1f2 	udiv	r1, r3, r2
 800166a:	fb01 f202 	mul.w	r2, r1, r2
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <main+0x1dc>)
 8001674:	701a      	strb	r2, [r3, #0]

			    while(numero_aleatorio == 0){
 8001676:	e016      	b.n	80016a6 <main+0x106>

			    srand(conta);
 8001678:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <main+0x1d0>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f004 faf9 	bl	8005c74 <srand>
			    numerogrande = rand();
 8001682:	f004 fb25 	bl	8005cd0 <rand>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <main+0x1d4>)
 800168c:	601a      	str	r2, [r3, #0]
			    numero_aleatorio = numerogrande % max;
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <main+0x1d4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a39      	ldr	r2, [pc, #228]	; (8001778 <main+0x1d8>)
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	fbb3 f1f2 	udiv	r1, r3, r2
 800169a:	fb01 f202 	mul.w	r2, r1, r2
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <main+0x1dc>)
 80016a4:	701a      	strb	r2, [r3, #0]
			    while(numero_aleatorio == 0){
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <main+0x1dc>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0e4      	beq.n	8001678 <main+0xd8>

			    }

			    sprintf(exibe_numero, "%d", numero_aleatorio);
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <main+0x1dc>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4932      	ldr	r1, [pc, #200]	; (8001780 <main+0x1e0>)
 80016b6:	4833      	ldr	r0, [pc, #204]	; (8001784 <main+0x1e4>)
 80016b8:	f004 fb48 	bl	8005d4c <siprintf>


			   // if(Ax > 0.9 || Ax < -0.9 || Ay > 0.9 || Ay < -0.9  || Az > 1.5 ){
			    if(Az > MAX_AZ ){
 80016bc:	4b32      	ldr	r3, [pc, #200]	; (8001788 <main+0x1e8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff61 	bl	8000588 <__aeabi_f2d>
 80016c6:	a320      	add	r3, pc, #128	; (adr r3, 8001748 <main+0x1a8>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7ff fa44 	bl	8000b58 <__aeabi_dcmpgt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d100      	bne.n	80016d8 <main+0x138>

					SSD1306_Clear();
			    	modo = EXIBINDO;
			    }

			  break;
 80016d6:	e036      	b.n	8001746 <main+0x1a6>
					SSD1306_Clear();
 80016d8:	f000 fb71 	bl	8001dbe <SSD1306_Clear>
			    	modo = EXIBINDO;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <main+0x1b8>)
 80016de:	2202      	movs	r2, #2
 80016e0:	701a      	strb	r2, [r3, #0]
			  break;
 80016e2:	e030      	b.n	8001746 <main+0x1a6>

		  case EXIBINDO:

			  header();
 80016e4:	f7ff ff48 	bl	8001578 <header>

			  SSD1306_GotoXY (55, 30);
 80016e8:	211e      	movs	r1, #30
 80016ea:	2037      	movs	r0, #55	; 0x37
 80016ec:	f000 faac 	bl	8001c48 <SSD1306_GotoXY>
			  SSD1306_Puts (exibe_numero, &Font_11x18, 1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	491d      	ldr	r1, [pc, #116]	; (8001768 <main+0x1c8>)
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <main+0x1e4>)
 80016f6:	f000 fb3d 	bl	8001d74 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); //display
 80016fa:	f000 f9ff 	bl	8001afc <SSD1306_UpdateScreen>

			  sprintf(msg, "\r Numero sorteado = %i\n\r", numero_aleatorio);
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <main+0x1dc>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4921      	ldr	r1, [pc, #132]	; (800178c <main+0x1ec>)
 8001706:	4822      	ldr	r0, [pc, #136]	; (8001790 <main+0x1f0>)
 8001708:	f004 fb20 	bl	8005d4c <siprintf>
			  HAL_UART_Transmit(&huart2, msg, strlen(msg), TOUT);
 800170c:	4820      	ldr	r0, [pc, #128]	; (8001790 <main+0x1f0>)
 800170e:	f7fe fd7f 	bl	8000210 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	2364      	movs	r3, #100	; 0x64
 8001718:	491d      	ldr	r1, [pc, #116]	; (8001790 <main+0x1f0>)
 800171a:	481e      	ldr	r0, [pc, #120]	; (8001794 <main+0x1f4>)
 800171c:	f003 ff03 	bl	8005526 <HAL_UART_Transmit>


			  	if(bsubida){
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <main+0x1c4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00d      	beq.n	8001744 <main+0x1a4>

			  	  comando = 0;
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <main+0x1c0>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
				  comando_hold = 0;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <main+0x1bc>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
				  SSD1306_Clear();
 8001734:	f000 fb43 	bl	8001dbe <SSD1306_Clear>
				  modo = CONFIGURANDO;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <main+0x1b8>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
			  }

			  break;
 800173e:	e001      	b.n	8001744 <main+0x1a4>
			  break;
 8001740:	bf00      	nop
 8001742:	e752      	b.n	80015ea <main+0x4a>
			  break;
 8001744:	bf00      	nop
	  switch(modo){
 8001746:	e750      	b.n	80015ea <main+0x4a>
 8001748:	3d70a3d7 	.word	0x3d70a3d7
 800174c:	3fffd70a 	.word	0x3fffd70a
 8001750:	2000064c 	.word	0x2000064c
 8001754:	20000694 	.word	0x20000694
 8001758:	2000022f 	.word	0x2000022f
 800175c:	20000229 	.word	0x20000229
 8001760:	20000228 	.word	0x20000228
 8001764:	2000022e 	.word	0x2000022e
 8001768:	20000008 	.word	0x20000008
 800176c:	080071d4 	.word	0x080071d4
 8001770:	20000234 	.word	0x20000234
 8001774:	20000230 	.word	0x20000230
 8001778:	2000023b 	.word	0x2000023b
 800177c:	2000023c 	.word	0x2000023c
 8001780:	080071dc 	.word	0x080071dc
 8001784:	20000238 	.word	0x20000238
 8001788:	20000224 	.word	0x20000224
 800178c:	080071e0 	.word	0x080071e0
 8001790:	20000144 	.word	0x20000144
 8001794:	200006dc 	.word	0x200006dc

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	; 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	2234      	movs	r2, #52	; 0x34
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 fa5c 	bl	8005c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <SystemClock_Config+0xd4>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a29      	ldr	r2, [pc, #164]	; (800186c <SystemClock_Config+0xd4>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <SystemClock_Config+0xd4>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <SystemClock_Config+0xd8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <SystemClock_Config+0xd8>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <SystemClock_Config+0xd8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001800:	2310      	movs	r3, #16
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001804:	2302      	movs	r3, #2
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800180c:	2310      	movs	r3, #16
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001810:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001816:	2304      	movs	r3, #4
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800181a:	2302      	movs	r3, #2
 800181c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800181e:	2302      	movs	r3, #2
 8001820:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff10 	bl	800464c <HAL_RCC_OscConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001832:	f000 f897 	bl	8001964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001836:	230f      	movs	r3, #15
 8001838:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183a:	2302      	movs	r3, #2
 800183c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	2102      	movs	r1, #2
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fbb0 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800185e:	f000 f881 	bl	8001964 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	; 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a30      	ldr	r2, [pc, #192]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d13f      	bne.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x92>

		conta++;
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001890:	801a      	strh	r2, [r3, #0]

		if(conta > 4092)
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	f640 72fc 	movw	r2, #4092	; 0xffc
 800189a:	4293      	cmp	r3, r2
 800189c:	d902      	bls.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0x30>
			conta = 0;
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]

		//Lendo o sensor

		  MPU6050_Read_Accel();
 80018a4:	f7ff fd0c 	bl	80012c0 <MPU6050_Read_Accel>

//=======================DEBOUNCE E DETECCAO DE BORDA =======================//


		bt1[AGORA] = HAL_GPIO_ReadPin(BOT1_GPIO_Port, BOT1_Pin);
 80018a8:	2102      	movs	r1, #2
 80018aa:	4828      	ldr	r0, [pc, #160]	; (800194c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018ac:	f001 f8e4 	bl	8002a78 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018b6:	701a      	strb	r2, [r3, #0]

		if (bt1[AGORA] == 1 && bt1[ANTES] == 0) {
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10c      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x66>
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d108      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x66>

			bsubida = 1;
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
			comando++;
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018d8:	701a      	strb	r2, [r3, #0]

		}

		 if (bt1[AGORA]==0 && bt1[ANTES]==1)
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
		 {
			// bdescida = 1;
			 bsubida = 0;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
		 }

		bt1[ANTES] = bt1[AGORA];  /////// DETC BOT 1
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018f6:	705a      	strb	r2, [r3, #1]

		if (comando > 6)
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b06      	cmp	r3, #6
 80018fe:	d902      	bls.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x92>
			comando = 0;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]

	}  //////////////FIM DEBOUNCE E DETEC.BORDA


	if (htim->Instance == TIM11) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d114      	bne.n	800193a <HAL_TIM_PeriodElapsedCallback+0xc6>

		if(bsubida){
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00d      	beq.n	8001934 <HAL_TIM_PeriodElapsedCallback+0xc0>
			comando_hold++;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001922:	701a      	strb	r2, [r3, #0]

			if(comando_hold > 3) //3 segundos
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d906      	bls.n	800193a <HAL_TIM_PeriodElapsedCallback+0xc6>
				comando_hold = 0;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]

		else
			comando_hold = 0;
	}

}
 8001932:	e002      	b.n	800193a <HAL_TIM_PeriodElapsedCallback+0xc6>
			comando_hold = 0;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40010000 	.word	0x40010000
 8001948:	20000234 	.word	0x20000234
 800194c:	40020400 	.word	0x40020400
 8001950:	2000022c 	.word	0x2000022c
 8001954:	2000022e 	.word	0x2000022e
 8001958:	20000228 	.word	0x20000228
 800195c:	40014800 	.word	0x40014800
 8001960:	20000229 	.word	0x20000229

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800197a:	f000 fa29 	bl	8001dd0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800197e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001982:	2201      	movs	r2, #1
 8001984:	2178      	movs	r1, #120	; 0x78
 8001986:	485b      	ldr	r0, [pc, #364]	; (8001af4 <SSD1306_Init+0x180>)
 8001988:	f001 fe0a 	bl	80035a0 <HAL_I2C_IsDeviceReady>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001992:	2300      	movs	r3, #0
 8001994:	e0a9      	b.n	8001aea <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001996:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800199a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800199c:	e002      	b.n	80019a4 <SSD1306_Init+0x30>
		p--;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f9      	bne.n	800199e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80019aa:	22ae      	movs	r2, #174	; 0xae
 80019ac:	2100      	movs	r1, #0
 80019ae:	2078      	movs	r0, #120	; 0x78
 80019b0:	f000 fa8a 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80019b4:	2220      	movs	r2, #32
 80019b6:	2100      	movs	r1, #0
 80019b8:	2078      	movs	r0, #120	; 0x78
 80019ba:	f000 fa85 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80019be:	2210      	movs	r2, #16
 80019c0:	2100      	movs	r1, #0
 80019c2:	2078      	movs	r0, #120	; 0x78
 80019c4:	f000 fa80 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80019c8:	22b0      	movs	r2, #176	; 0xb0
 80019ca:	2100      	movs	r1, #0
 80019cc:	2078      	movs	r0, #120	; 0x78
 80019ce:	f000 fa7b 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80019d2:	22c8      	movs	r2, #200	; 0xc8
 80019d4:	2100      	movs	r1, #0
 80019d6:	2078      	movs	r0, #120	; 0x78
 80019d8:	f000 fa76 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	2078      	movs	r0, #120	; 0x78
 80019e2:	f000 fa71 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80019e6:	2210      	movs	r2, #16
 80019e8:	2100      	movs	r1, #0
 80019ea:	2078      	movs	r0, #120	; 0x78
 80019ec:	f000 fa6c 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80019f0:	2240      	movs	r2, #64	; 0x40
 80019f2:	2100      	movs	r1, #0
 80019f4:	2078      	movs	r0, #120	; 0x78
 80019f6:	f000 fa67 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80019fa:	2281      	movs	r2, #129	; 0x81
 80019fc:	2100      	movs	r1, #0
 80019fe:	2078      	movs	r0, #120	; 0x78
 8001a00:	f000 fa62 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a04:	22ff      	movs	r2, #255	; 0xff
 8001a06:	2100      	movs	r1, #0
 8001a08:	2078      	movs	r0, #120	; 0x78
 8001a0a:	f000 fa5d 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001a0e:	22a1      	movs	r2, #161	; 0xa1
 8001a10:	2100      	movs	r1, #0
 8001a12:	2078      	movs	r0, #120	; 0x78
 8001a14:	f000 fa58 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001a18:	22a6      	movs	r2, #166	; 0xa6
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2078      	movs	r0, #120	; 0x78
 8001a1e:	f000 fa53 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001a22:	22a8      	movs	r2, #168	; 0xa8
 8001a24:	2100      	movs	r1, #0
 8001a26:	2078      	movs	r0, #120	; 0x78
 8001a28:	f000 fa4e 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001a2c:	223f      	movs	r2, #63	; 0x3f
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2078      	movs	r0, #120	; 0x78
 8001a32:	f000 fa49 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a36:	22a4      	movs	r2, #164	; 0xa4
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2078      	movs	r0, #120	; 0x78
 8001a3c:	f000 fa44 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001a40:	22d3      	movs	r2, #211	; 0xd3
 8001a42:	2100      	movs	r1, #0
 8001a44:	2078      	movs	r0, #120	; 0x78
 8001a46:	f000 fa3f 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2078      	movs	r0, #120	; 0x78
 8001a50:	f000 fa3a 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a54:	22d5      	movs	r2, #213	; 0xd5
 8001a56:	2100      	movs	r1, #0
 8001a58:	2078      	movs	r0, #120	; 0x78
 8001a5a:	f000 fa35 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a5e:	22f0      	movs	r2, #240	; 0xf0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2078      	movs	r0, #120	; 0x78
 8001a64:	f000 fa30 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a68:	22d9      	movs	r2, #217	; 0xd9
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2078      	movs	r0, #120	; 0x78
 8001a6e:	f000 fa2b 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a72:	2222      	movs	r2, #34	; 0x22
 8001a74:	2100      	movs	r1, #0
 8001a76:	2078      	movs	r0, #120	; 0x78
 8001a78:	f000 fa26 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a7c:	22da      	movs	r2, #218	; 0xda
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2078      	movs	r0, #120	; 0x78
 8001a82:	f000 fa21 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a86:	2212      	movs	r2, #18
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2078      	movs	r0, #120	; 0x78
 8001a8c:	f000 fa1c 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a90:	22db      	movs	r2, #219	; 0xdb
 8001a92:	2100      	movs	r1, #0
 8001a94:	2078      	movs	r0, #120	; 0x78
 8001a96:	f000 fa17 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2078      	movs	r0, #120	; 0x78
 8001aa0:	f000 fa12 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001aa4:	228d      	movs	r2, #141	; 0x8d
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2078      	movs	r0, #120	; 0x78
 8001aaa:	f000 fa0d 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001aae:	2214      	movs	r2, #20
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2078      	movs	r0, #120	; 0x78
 8001ab4:	f000 fa08 	bl	8001ec8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001ab8:	22af      	movs	r2, #175	; 0xaf
 8001aba:	2100      	movs	r1, #0
 8001abc:	2078      	movs	r0, #120	; 0x78
 8001abe:	f000 fa03 	bl	8001ec8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ac2:	222e      	movs	r2, #46	; 0x2e
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2078      	movs	r0, #120	; 0x78
 8001ac8:	f000 f9fe 	bl	8001ec8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f000 f843 	bl	8001b58 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001ad2:	f000 f813 	bl	8001afc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <SSD1306_Init+0x184>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SSD1306_Init+0x184>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SSD1306_Init+0x184>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000f0 	.word	0x200000f0
 8001af8:	20000640 	.word	0x20000640

08001afc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	e01d      	b.n	8001b44 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	3b50      	subs	r3, #80	; 0x50
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2100      	movs	r1, #0
 8001b12:	2078      	movs	r0, #120	; 0x78
 8001b14:	f000 f9d8 	bl	8001ec8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2078      	movs	r0, #120	; 0x78
 8001b1e:	f000 f9d3 	bl	8001ec8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b22:	2210      	movs	r2, #16
 8001b24:	2100      	movs	r1, #0
 8001b26:	2078      	movs	r0, #120	; 0x78
 8001b28:	f000 f9ce 	bl	8001ec8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	01db      	lsls	r3, r3, #7
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <SSD1306_UpdateScreen+0x58>)
 8001b32:	441a      	add	r2, r3
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	2078      	movs	r0, #120	; 0x78
 8001b3a:	f000 f95f 	bl	8001dfc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	3301      	adds	r3, #1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b07      	cmp	r3, #7
 8001b48:	d9de      	bls.n	8001b08 <SSD1306_UpdateScreen+0xc>
	}
}
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000240 	.word	0x20000240

08001b58 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <SSD1306_Fill+0x14>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e000      	b.n	8001b6e <SSD1306_Fill+0x16>
 8001b6c:	23ff      	movs	r3, #255	; 0xff
 8001b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b72:	4619      	mov	r1, r3
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <SSD1306_Fill+0x2c>)
 8001b76:	f004 f875 	bl	8005c64 <memset>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000240 	.word	0x20000240

08001b88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
 8001b92:	460b      	mov	r3, r1
 8001b94:	80bb      	strh	r3, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	70fb      	strb	r3, [r7, #3]
	if (
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9e:	d848      	bhi.n	8001c32 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ba4:	d845      	bhi.n	8001c32 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <SSD1306_DrawPixel+0xb8>)
 8001ba8:	791b      	ldrb	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d11a      	bne.n	8001bf8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	08db      	lsrs	r3, r3, #3
 8001bc8:	b298      	uxth	r0, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <SSD1306_DrawPixel+0xbc>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	b25a      	sxtb	r2, r3
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b259      	sxtb	r1, r3
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	4603      	mov	r3, r0
 8001bec:	01db      	lsls	r3, r3, #7
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2c9      	uxtb	r1, r1
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <SSD1306_DrawPixel+0xbc>)
 8001bf4:	54d1      	strb	r1, [r2, r3]
 8001bf6:	e01d      	b.n	8001c34 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	88bb      	ldrh	r3, [r7, #4]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	b298      	uxth	r0, r3
 8001c00:	4603      	mov	r3, r0
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	4413      	add	r3, r2
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <SSD1306_DrawPixel+0xbc>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	b25a      	sxtb	r2, r3
 8001c0c:	88bb      	ldrh	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b259      	sxtb	r1, r3
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	4603      	mov	r3, r0
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	4413      	add	r3, r2
 8001c2a:	b2c9      	uxtb	r1, r1
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <SSD1306_DrawPixel+0xbc>)
 8001c2e:	54d1      	strb	r1, [r2, r3]
 8001c30:	e000      	b.n	8001c34 <SSD1306_DrawPixel+0xac>
		return;
 8001c32:	bf00      	nop
	}
}
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000640 	.word	0x20000640
 8001c44:	20000240 	.word	0x20000240

08001c48 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	80fb      	strh	r3, [r7, #6]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c58:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <SSD1306_GotoXY+0x28>)
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <SSD1306_GotoXY+0x28>)
 8001c60:	88bb      	ldrh	r3, [r7, #4]
 8001c62:	8053      	strh	r3, [r2, #2]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	20000640 	.word	0x20000640

08001c74 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
	if (
 8001c90:	2b7f      	cmp	r3, #127	; 0x7f
 8001c92:	dc07      	bgt.n	8001ca4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001c96:	885b      	ldrh	r3, [r3, #2]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ca2:	dd01      	ble.n	8001ca8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e05e      	b.n	8001d66 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e04b      	b.n	8001d46 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	3b20      	subs	r3, #32
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	7849      	ldrb	r1, [r1, #1]
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	440b      	add	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	e030      	b.n	8001d34 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d010      	beq.n	8001d04 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001ce4:	881a      	ldrh	r2, [r3, #0]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b298      	uxth	r0, r3
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001cf0:	885a      	ldrh	r2, [r3, #2]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	79ba      	ldrb	r2, [r7, #6]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7ff ff43 	bl	8001b88 <SSD1306_DrawPixel>
 8001d02:	e014      	b.n	8001d2e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001d12:	885a      	ldrh	r2, [r3, #2]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	b299      	uxth	r1, r3
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f7ff ff2d 	bl	8001b88 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	3301      	adds	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d3c8      	bcc.n	8001cd2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d3ad      	bcc.n	8001cae <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <SSD1306_Putc+0xfc>)
 8001d62:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001d64:	79fb      	ldrb	r3, [r7, #7]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000640 	.word	0x20000640

08001d74 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d82:	e012      	b.n	8001daa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	79fa      	ldrb	r2, [r7, #7]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff71 	bl	8001c74 <SSD1306_Putc>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d002      	beq.n	8001da4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	e008      	b.n	8001db6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1e8      	bne.n	8001d84 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	781b      	ldrb	r3, [r3, #0]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fec8 	bl	8001b58 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001dc8:	f7ff fe98 	bl	8001afc <SSD1306_UpdateScreen>
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <ssd1306_I2C_Init+0x28>)
 8001dd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dda:	e002      	b.n	8001de2 <ssd1306_I2C_Init+0x12>
		p--;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	0003d090 	.word	0x0003d090

08001dfc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b0c7      	sub	sp, #284	; 0x11c
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4604      	mov	r4, r0
 8001e04:	4608      	mov	r0, r1
 8001e06:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001e0a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001e0e:	600a      	str	r2, [r1, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e16:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e22:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001e26:	4602      	mov	r2, r0
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e32:	460a      	mov	r2, r1
 8001e34:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e3e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e42:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e50:	e015      	b.n	8001e7e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001e52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e56:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e5a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	441a      	add	r2, r3
 8001e62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e66:	3301      	adds	r3, #1
 8001e68:	7811      	ldrb	r1, [r2, #0]
 8001e6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e6e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001e72:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e88:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001e8c:	8812      	ldrh	r2, [r2, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d8df      	bhi.n	8001e52 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e96:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b299      	uxth	r1, r3
 8001e9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ea2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f107 020c 	add.w	r2, r7, #12
 8001eb0:	200a      	movs	r0, #10
 8001eb2:	9000      	str	r0, [sp, #0]
 8001eb4:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001eb6:	f000 ff55 	bl	8002d64 <HAL_I2C_Master_Transmit>
}
 8001eba:	bf00      	nop
 8001ebc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd90      	pop	{r4, r7, pc}
 8001ec4:	200000f0 	.word	0x200000f0

08001ec8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	71bb      	strb	r3, [r7, #6]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ede:	797b      	ldrb	r3, [r7, #5]
 8001ee0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	f107 020c 	add.w	r2, r7, #12
 8001eea:	230a      	movs	r3, #10
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2302      	movs	r3, #2
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <ssd1306_I2C_Write+0x38>)
 8001ef2:	f000 ff37 	bl	8002d64 <HAL_I2C_Master_Transmit>
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200000f0 	.word	0x200000f0

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f42:	2007      	movs	r0, #7
 8001f44:	f000 fbc2 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <NMI_Handler+0x4>

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 faa4 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fae:	f002 feab 	bl	8004d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000064c 	.word	0x2000064c

08001fbc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001fc2:	f002 fea1 	bl	8004d08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001fc8:	f002 fe9e 	bl	8004d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	2000064c 	.word	0x2000064c
 8001fd4:	20000694 	.word	0x20000694

08001fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_kill>:

int _kill(int pid, int sig)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff2:	f003 fe0d 	bl	8005c10 <__errno>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2216      	movs	r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
  return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_exit>:

void _exit (int status)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ffe7 	bl	8001fe8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800201a:	e7fe      	b.n	800201a <_exit+0x12>

0800201c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e00a      	b.n	8002044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202e:	f3af 8000 	nop.w
 8002032:	4601      	mov	r1, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf0      	blt.n	800202e <_read+0x12>
  }

  return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e009      	b.n	800207c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf1      	blt.n	8002068 <_write+0x12>
  }
  return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_close>:

int _close(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b6:	605a      	str	r2, [r3, #4]
  return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_isatty>:

int _isatty(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f003 fd72 	bl	8005c10 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20020000 	.word	0x20020000
 8002158:	00000400 	.word	0x00000400
 800215c:	20000648 	.word	0x20000648
 8002160:	20000738 	.word	0x20000738

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021a6:	4a20      	ldr	r2, [pc, #128]	; (8002228 <MX_TIM1_Init+0xa0>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021ac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80021b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 540-1;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021ba:	f240 221b 	movw	r2, #539	; 0x21b
 80021be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021d2:	4814      	ldr	r0, [pc, #80]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021d4:	f002 fcd8 	bl	8004b88 <HAL_TIM_Base_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80021de:	f7ff fbc1 	bl	8001964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	4619      	mov	r1, r3
 80021ee:	480d      	ldr	r0, [pc, #52]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021f0:	f002 fe92 	bl	8004f18 <HAL_TIM_ConfigClockSource>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80021fa:	f7ff fbb3 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002206:	463b      	mov	r3, r7
 8002208:	4619      	mov	r1, r3
 800220a:	4806      	ldr	r0, [pc, #24]	; (8002224 <MX_TIM1_Init+0x9c>)
 800220c:	f003 f8ae 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002216:	f7ff fba5 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000064c 	.word	0x2000064c
 8002228:	40010000 	.word	0x40010000

0800222c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_TIM11_Init+0x40>)
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <MX_TIM11_Init+0x44>)
 8002234:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <MX_TIM11_Init+0x40>)
 8002238:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800223c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_TIM11_Init+0x40>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_TIM11_Init+0x40>)
 8002246:	f242 720f 	movw	r2, #9999	; 0x270f
 800224a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <MX_TIM11_Init+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_TIM11_Init+0x40>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002258:	4804      	ldr	r0, [pc, #16]	; (800226c <MX_TIM11_Init+0x40>)
 800225a:	f002 fc95 	bl	8004b88 <HAL_TIM_Base_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002264:	f7ff fb7e 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000694 	.word	0x20000694
 8002270:	40014800 	.word	0x40014800

08002274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a20      	ldr	r2, [pc, #128]	; (8002304 <HAL_TIM_Base_MspInit+0x90>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11e      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_TIM_Base_MspInit+0x94>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_TIM_Base_MspInit+0x94>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_TIM_Base_MspInit+0x94>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2019      	movs	r0, #25
 80022a8:	f000 fa1b 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022ac:	2019      	movs	r0, #25
 80022ae:	f000 fa34 	bl	800271a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	201a      	movs	r0, #26
 80022b8:	f000 fa13 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022bc:	201a      	movs	r0, #26
 80022be:	f000 fa2c 	bl	800271a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80022c2:	e01a      	b.n	80022fa <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM11)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_TIM_Base_MspInit+0x98>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d115      	bne.n	80022fa <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_TIM_Base_MspInit+0x94>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <HAL_TIM_Base_MspInit+0x94>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_TIM_Base_MspInit+0x94>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	201a      	movs	r0, #26
 80022f0:	f000 f9f7 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022f4:	201a      	movs	r0, #26
 80022f6:	f000 fa10 	bl	800271a <HAL_NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40023800 	.word	0x40023800
 800230c:	40014800 	.word	0x40014800

08002310 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <MX_USART2_UART_Init+0x50>)
 8002318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <MX_USART2_UART_Init+0x4c>)
 800231c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MX_USART2_UART_Init+0x4c>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002336:	220c      	movs	r2, #12
 8002338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <MX_USART2_UART_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002348:	f003 f8a0 	bl	800548c <HAL_UART_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002352:	f7ff fb07 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200006dc 	.word	0x200006dc
 8002360:	40004400 	.word	0x40004400

08002364 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_UART_MspInit+0x84>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d12b      	bne.n	80023de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_UART_MspInit+0x88>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_UART_MspInit+0x88>)
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_UART_MspInit+0x88>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_UART_MspInit+0x88>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_UART_MspInit+0x88>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_UART_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023be:	230c      	movs	r3, #12
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ce:	2307      	movs	r3, #7
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_UART_MspInit+0x8c>)
 80023da:	f000 f9b9 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40004400 	.word	0x40004400
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020000 	.word	0x40020000

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241e:	f7ff fea1 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f003 fbfb 	bl	8005c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7ff f8bb 	bl	80015a0 <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002438:	08008834 	.word	0x08008834
  ldr r2, =_sbss
 800243c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002440:	20000734 	.word	0x20000734

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_Init+0x40>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_Init+0x40>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_Init+0x40>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f92b 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f808 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fd42 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f943 	bl	8002736 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 f90b 	bl	80026e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000010 	.word	0x20000010
 80024e4:	20000018 	.word	0x20000018
 80024e8:	20000014 	.word	0x20000014

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000018 	.word	0x20000018
 8002510:	20000720 	.word	0x20000720

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000720 	.word	0x20000720

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002698:	d301      	bcc.n	800269e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269a:	2301      	movs	r3, #1
 800269c:	e00f      	b.n	80026be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <SysTick_Config+0x40>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a6:	210f      	movs	r1, #15
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f7ff ff8e 	bl	80025cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SysTick_Config+0x40>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <SysTick_Config+0x40>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	e000e010 	.word	0xe000e010

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff29 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f4:	f7ff ff3e 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ff8e 	bl	8002620 <NVIC_EncodePriority>
 8002704:	4602      	mov	r2, r0
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff5d 	bl	80025cc <__NVIC_SetPriority>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff31 	bl	8002590 <__NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffa2 	bl	8002688 <SysTick_Config>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e165      	b.n	8002a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 8154 	bne.w	8002a32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d005      	beq.n	80027a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d130      	bne.n	8002804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 0201 	and.w	r2, r3, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b03      	cmp	r3, #3
 800280e:	d017      	beq.n	8002840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d123      	bne.n	8002894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	08da      	lsrs	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3208      	adds	r2, #8
 800288e:	69b9      	ldr	r1, [r7, #24]
 8002890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0203 	and.w	r2, r3, #3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80ae 	beq.w	8002a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_GPIO_Init+0x300>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a5c      	ldr	r2, [pc, #368]	; (8002a50 <HAL_GPIO_Init+0x300>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b5a      	ldr	r3, [pc, #360]	; (8002a50 <HAL_GPIO_Init+0x300>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_GPIO_Init+0x304>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_GPIO_Init+0x308>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x21a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4e      	ldr	r2, [pc, #312]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x216>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4d      	ldr	r2, [pc, #308]	; (8002a60 <HAL_GPIO_Init+0x310>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x212>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4c      	ldr	r2, [pc, #304]	; (8002a64 <HAL_GPIO_Init+0x314>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x20e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4b      	ldr	r2, [pc, #300]	; (8002a68 <HAL_GPIO_Init+0x318>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x20a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4a      	ldr	r2, [pc, #296]	; (8002a6c <HAL_GPIO_Init+0x31c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x206>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a49      	ldr	r2, [pc, #292]	; (8002a70 <HAL_GPIO_Init+0x320>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x202>
 800294e:	2306      	movs	r3, #6
 8002950:	e00c      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002952:	2307      	movs	r3, #7
 8002954:	e00a      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002956:	2305      	movs	r3, #5
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800295a:	2304      	movs	r3, #4
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x21c>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x21c>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4935      	ldr	r1, [pc, #212]	; (8002a54 <HAL_GPIO_Init+0x304>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_GPIO_Init+0x324>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029de:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_GPIO_Init+0x324>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_GPIO_Init+0x324>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_GPIO_Init+0x324>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f ae96 	bls.w	800276c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40021400 	.word	0x40021400
 8002a70:	40021800 	.word	0x40021800
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e001      	b.n	8002a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac4:	e003      	b.n	8002ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	041a      	lsls	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	619a      	str	r2, [r3, #24]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e12b      	b.n	8002d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fadc 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b40:	f001 fb2c 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8002b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a81      	ldr	r2, [pc, #516]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d807      	bhi.n	8002b60 <HAL_I2C_Init+0x84>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a80      	ldr	r2, [pc, #512]	; (8002d54 <HAL_I2C_Init+0x278>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e006      	b.n	8002b6e <HAL_I2C_Init+0x92>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a7d      	ldr	r2, [pc, #500]	; (8002d58 <HAL_I2C_Init+0x27c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bf94      	ite	ls
 8002b68:	2301      	movls	r3, #1
 8002b6a:	2300      	movhi	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0e7      	b.n	8002d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a78      	ldr	r2, [pc, #480]	; (8002d5c <HAL_I2C_Init+0x280>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a6a      	ldr	r2, [pc, #424]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d802      	bhi.n	8002bb0 <HAL_I2C_Init+0xd4>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	e009      	b.n	8002bc4 <HAL_I2C_Init+0xe8>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	4a69      	ldr	r2, [pc, #420]	; (8002d60 <HAL_I2C_Init+0x284>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	495c      	ldr	r1, [pc, #368]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002be0:	428b      	cmp	r3, r1
 8002be2:	d819      	bhi.n	8002c18 <HAL_I2C_Init+0x13c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e59      	subs	r1, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf2:	1c59      	adds	r1, r3, #1
 8002bf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_I2C_Init+0x138>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e59      	subs	r1, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c12:	e051      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c14:	2304      	movs	r3, #4
 8002c16:	e04f      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <HAL_I2C_Init+0x168>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1e58      	subs	r0, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e012      	b.n	8002c6a <HAL_I2C_Init+0x18e>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e58      	subs	r0, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	0099      	lsls	r1, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Init+0x196>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e022      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_I2C_Init+0x1bc>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e58      	subs	r0, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	440b      	add	r3, r1
 8002c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	e00f      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e58      	subs	r0, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	0099      	lsls	r1, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6809      	ldr	r1, [r1, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6911      	ldr	r1, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	000186a0 	.word	0x000186a0
 8002d54:	001e847f 	.word	0x001e847f
 8002d58:	003d08ff 	.word	0x003d08ff
 8002d5c:	431bde83 	.word	0x431bde83
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	460b      	mov	r3, r1
 8002d72:	817b      	strh	r3, [r7, #10]
 8002d74:	4613      	mov	r3, r2
 8002d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff fbcc 	bl	8002514 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f040 80e0 	bne.w	8002f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2319      	movs	r3, #25
 8002d92:	2201      	movs	r2, #1
 8002d94:	4970      	ldr	r1, [pc, #448]	; (8002f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 ff30 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	e0d3      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_I2C_Master_Transmit+0x50>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0cc      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d007      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0201 	orr.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2221      	movs	r2, #33	; 0x21
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2210      	movs	r2, #16
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	893a      	ldrh	r2, [r7, #8]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e1c:	8979      	ldrh	r1, [r7, #10]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6a3a      	ldr	r2, [r7, #32]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fcea 	bl	80037fc <I2C_MasterRequestWrite>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e08d      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e48:	e066      	b.n	8002f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	6a39      	ldr	r1, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 ffaa 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11b      	bne.n	8002eec <HAL_I2C_Master_Transmit+0x188>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	6a39      	ldr	r1, [r7, #32]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 ff9a 	bl	8003e2a <I2C_WaitOnBTFFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e01a      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d194      	bne.n	8002e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	460b      	mov	r3, r1
 8002f74:	813b      	strh	r3, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f7a:	f7ff facb 	bl	8002514 <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	f040 80d9 	bne.w	8003140 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2319      	movs	r3, #25
 8002f94:	2201      	movs	r2, #1
 8002f96:	496d      	ldr	r1, [pc, #436]	; (800314c <HAL_I2C_Mem_Write+0x1ec>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fe2f 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0cc      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Mem_Write+0x56>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0c5      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2221      	movs	r2, #33	; 0x21
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2240      	movs	r2, #64	; 0x40
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a4d      	ldr	r2, [pc, #308]	; (8003150 <HAL_I2C_Mem_Write+0x1f0>)
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301e:	88f8      	ldrh	r0, [r7, #6]
 8003020:	893a      	ldrh	r2, [r7, #8]
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	4603      	mov	r3, r0
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fc66 	bl	8003900 <I2C_RequestMemoryWrite>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d052      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e081      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 feb0 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b04      	cmp	r3, #4
 8003054:	d107      	bne.n	8003066 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003064:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06b      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d11b      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x180>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d017      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1aa      	bne.n	800303e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fe9c 	bl	8003e2a <I2C_WaitOnBTFFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d107      	bne.n	8003110 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e016      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	00100002 	.word	0x00100002
 8003150:	ffff0000 	.word	0xffff0000

08003154 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	; 0x30
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800316e:	f7ff f9d1 	bl	8002514 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b20      	cmp	r3, #32
 800317e:	f040 8208 	bne.w	8003592 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2319      	movs	r3, #25
 8003188:	2201      	movs	r2, #1
 800318a:	497b      	ldr	r1, [pc, #492]	; (8003378 <HAL_I2C_Mem_Read+0x224>)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fd35 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	e1fb      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Mem_Read+0x56>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e1f4      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d007      	beq.n	80031d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2222      	movs	r2, #34	; 0x22
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a5b      	ldr	r2, [pc, #364]	; (800337c <HAL_I2C_Mem_Read+0x228>)
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003212:	88f8      	ldrh	r0, [r7, #6]
 8003214:	893a      	ldrh	r2, [r7, #8]
 8003216:	8979      	ldrh	r1, [r7, #10]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4603      	mov	r3, r0
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fc02 	bl	8003a2c <I2C_RequestMemoryRead>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1b0      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	2300      	movs	r3, #0
 800323c:	623b      	str	r3, [r7, #32]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e184      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11b      	bne.n	80032a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e164      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d11b      	bne.n	80032e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	e144      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032f8:	e138      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b03      	cmp	r3, #3
 8003300:	f200 80f1 	bhi.w	80034e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b01      	cmp	r3, #1
 800330a:	d123      	bne.n	8003354 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fdcb 	bl	8003eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e139      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003352:	e10b      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	2b02      	cmp	r3, #2
 800335a:	d14e      	bne.n	80033fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	2200      	movs	r2, #0
 8003364:	4906      	ldr	r1, [pc, #24]	; (8003380 <HAL_I2C_Mem_Read+0x22c>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fc48 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e10e      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
 8003376:	bf00      	nop
 8003378:	00100002 	.word	0x00100002
 800337c:	ffff0000 	.word	0xffff0000
 8003380:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f8:	e0b8      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	2200      	movs	r2, #0
 8003402:	4966      	ldr	r1, [pc, #408]	; (800359c <HAL_I2C_Mem_Read+0x448>)
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fbf9 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0bf      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	2200      	movs	r2, #0
 800345e:	494f      	ldr	r1, [pc, #316]	; (800359c <HAL_I2C_Mem_Read+0x448>)
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fbcb 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e091      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e4:	e042      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fcde 	bl	8003eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e04c      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d118      	bne.n	800356c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	f47f aec2 	bne.w	80032fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010004 	.word	0x00010004

080035a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	460b      	mov	r3, r1
 80035ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035b0:	f7fe ffb0 	bl	8002514 <HAL_GetTick>
 80035b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 8111 	bne.w	80037ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2319      	movs	r3, #25
 80035ce:	2201      	movs	r2, #1
 80035d0:	4988      	ldr	r1, [pc, #544]	; (80037f4 <HAL_I2C_IsDeviceReady+0x254>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fb12 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	e104      	b.n	80037ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2C_IsDeviceReady+0x50>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0fd      	b.n	80037ec <HAL_I2C_IsDeviceReady+0x24c>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d007      	beq.n	8003616 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a70      	ldr	r2, [pc, #448]	; (80037f8 <HAL_I2C_IsDeviceReady+0x258>)
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003648:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2200      	movs	r2, #0
 8003652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fad0 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003670:	d103      	bne.n	800367a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b6      	b.n	80037ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800368c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800368e:	f7fe ff41 	bl	8002514 <HAL_GetTick>
 8003692:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	bf0c      	ite	eq
 80036ba:	2301      	moveq	r3, #1
 80036bc:	2300      	movne	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036c2:	e025      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe ff26 	bl	8002514 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <HAL_I2C_IsDeviceReady+0x13a>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22a0      	movs	r2, #160	; 0xa0
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2ba0      	cmp	r3, #160	; 0xa0
 800371a:	d005      	beq.n	8003728 <HAL_I2C_IsDeviceReady+0x188>
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <HAL_I2C_IsDeviceReady+0x188>
 8003722:	7dbb      	ldrb	r3, [r7, #22]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0cd      	beq.n	80036c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d129      	bne.n	8003792 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2319      	movs	r3, #25
 800376a:	2201      	movs	r2, #1
 800376c:	4921      	ldr	r1, [pc, #132]	; (80037f4 <HAL_I2C_IsDeviceReady+0x254>)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa44 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e036      	b.n	80037ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e02c      	b.n	80037ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2319      	movs	r3, #25
 80037b2:	2201      	movs	r2, #1
 80037b4:	490f      	ldr	r1, [pc, #60]	; (80037f4 <HAL_I2C_IsDeviceReady+0x254>)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fa20 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e012      	b.n	80037ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	3301      	adds	r3, #1
 80037ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f4ff af32 	bcc.w	800363a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00100002 	.word	0x00100002
 80037f8:	ffff0000 	.word	0xffff0000

080037fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d006      	beq.n	8003826 <I2C_MasterRequestWrite+0x2a>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d003      	beq.n	8003826 <I2C_MasterRequestWrite+0x2a>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003824:	d108      	bne.n	8003838 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e00b      	b.n	8003850 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	2b12      	cmp	r3, #18
 800383e:	d107      	bne.n	8003850 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9cd 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00d      	beq.n	8003884 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003876:	d103      	bne.n	8003880 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e035      	b.n	80038f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388c:	d108      	bne.n	80038a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	e01b      	b.n	80038d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038a0:	897b      	ldrh	r3, [r7, #10]
 80038a2:	11db      	asrs	r3, r3, #7
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0306 	and.w	r3, r3, #6
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f063 030f 	orn	r3, r3, #15
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	490e      	ldr	r1, [pc, #56]	; (80038f8 <I2C_MasterRequestWrite+0xfc>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f9f3 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e010      	b.n	80038f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4907      	ldr	r1, [pc, #28]	; (80038fc <I2C_MasterRequestWrite+0x100>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f9e3 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	00010008 	.word	0x00010008
 80038fc:	00010002 	.word	0x00010002

08003900 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	817b      	strh	r3, [r7, #10]
 8003912:	460b      	mov	r3, r1
 8003914:	813b      	strh	r3, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	2200      	movs	r2, #0
 8003932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f960 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003950:	d103      	bne.n	800395a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e05f      	b.n	8003a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800396c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	492d      	ldr	r1, [pc, #180]	; (8003a28 <I2C_RequestMemoryWrite+0x128>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f998 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04c      	b.n	8003a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa02 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e02b      	b.n	8003a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039cc:	893b      	ldrh	r3, [r7, #8]
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	611a      	str	r2, [r3, #16]
 80039d6:	e021      	b.n	8003a1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	6a39      	ldr	r1, [r7, #32]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f9dc 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d107      	bne.n	8003a0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e005      	b.n	8003a1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a12:	893b      	ldrh	r3, [r7, #8]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	00010002 	.word	0x00010002

08003a2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	817b      	strh	r3, [r7, #10]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	813b      	strh	r3, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f8c2 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8c:	d103      	bne.n	8003a96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0aa      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	4952      	ldr	r1, [pc, #328]	; (8003bf8 <I2C_RequestMemoryRead+0x1cc>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f8fa 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e097      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f964 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d107      	bne.n	8003afe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e076      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]
 8003b12:	e021      	b.n	8003b58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	6a39      	ldr	r1, [r7, #32]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f93e 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d107      	bne.n	8003b4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e050      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4e:	893b      	ldrh	r3, [r7, #8]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	6a39      	ldr	r1, [r7, #32]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f923 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d107      	bne.n	8003b80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e035      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f82b 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bba:	d103      	bne.n	8003bc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e013      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	6a3a      	ldr	r2, [r7, #32]
 8003bdc:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <I2C_RequestMemoryRead+0x1cc>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f863 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	00010002 	.word	0x00010002

08003bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c0c:	e025      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d021      	beq.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7fe fc7d 	bl	8002514 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d116      	bne.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e023      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d10d      	bne.n	8003c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	e00c      	b.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d0b6      	beq.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb8:	e051      	b.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	d123      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e046      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d021      	beq.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fe fbfb 	bl	8002514 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d116      	bne.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e020      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10c      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4013      	ands	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e00b      	b.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d18d      	bne.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db4:	e02d      	b.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8ce 	bl	8003f58 <I2C_IsAcknowledgeFailed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e02d      	b.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d021      	beq.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fe fba1 	bl	8002514 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d116      	bne.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e007      	b.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d1ca      	bne.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e36:	e02d      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f88d 	bl	8003f58 <I2C_IsAcknowledgeFailed>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e02d      	b.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d021      	beq.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7fe fb60 	bl	8002514 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d1ca      	bne.n	8003e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eb8:	e042      	b.n	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d119      	bne.n	8003efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0210 	mvn.w	r2, #16
 8003ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e029      	b.n	8003f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efc:	f7fe fb0a 	bl	8002514 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d116      	bne.n	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d1b5      	bne.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d11b      	bne.n	8003fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cc      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d90c      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d044      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d119      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d003      	beq.n	8004076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	2b03      	cmp	r3, #3
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e067      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4934      	ldr	r1, [pc, #208]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fe fa34 	bl	8002514 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fe fa30 	bl	8002514 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20c      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413e:	f000 f855 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490a      	ldr	r1, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe f994 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00
 8004174:	40023800 	.word	0x40023800
 8004178:	080086c4 	.word	0x080086c4
 800417c:	20000010 	.word	0x20000010
 8004180:	20000014 	.word	0x20000014

08004184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCC_GetHCLKFreq+0x14>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000010 	.word	0x20000010

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff0 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	080086d4 	.word	0x080086d4

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffdc 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	080086d4 	.word	0x080086d4

080041ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f0:	b0ae      	sub	sp, #184	; 0xb8
 80041f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004212:	4bcb      	ldr	r3, [pc, #812]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b0c      	cmp	r3, #12
 800421c:	f200 8206 	bhi.w	800462c <HAL_RCC_GetSysClockFreq+0x440>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800425d 	.word	0x0800425d
 800422c:	0800462d 	.word	0x0800462d
 8004230:	0800462d 	.word	0x0800462d
 8004234:	0800462d 	.word	0x0800462d
 8004238:	08004265 	.word	0x08004265
 800423c:	0800462d 	.word	0x0800462d
 8004240:	0800462d 	.word	0x0800462d
 8004244:	0800462d 	.word	0x0800462d
 8004248:	0800426d 	.word	0x0800426d
 800424c:	0800462d 	.word	0x0800462d
 8004250:	0800462d 	.word	0x0800462d
 8004254:	0800462d 	.word	0x0800462d
 8004258:	0800445d 	.word	0x0800445d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4bb9      	ldr	r3, [pc, #740]	; (8004544 <HAL_RCC_GetSysClockFreq+0x358>)
 800425e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004262:	e1e7      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004264:	4bb8      	ldr	r3, [pc, #736]	; (8004548 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800426a:	e1e3      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800426c:	4bb4      	ldr	r3, [pc, #720]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004278:	4bb1      	ldr	r3, [pc, #708]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d071      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004284:	4bae      	ldr	r3, [pc, #696]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004290:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	0159      	lsls	r1, r3, #5
 80042b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042bc:	0150      	lsls	r0, r2, #5
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4621      	mov	r1, r4
 80042c4:	1a51      	subs	r1, r2, r1
 80042c6:	6439      	str	r1, [r7, #64]	; 0x40
 80042c8:	4629      	mov	r1, r5
 80042ca:	eb63 0301 	sbc.w	r3, r3, r1
 80042ce:	647b      	str	r3, [r7, #68]	; 0x44
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80042dc:	4649      	mov	r1, r9
 80042de:	018b      	lsls	r3, r1, #6
 80042e0:	4641      	mov	r1, r8
 80042e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042e6:	4641      	mov	r1, r8
 80042e8:	018a      	lsls	r2, r1, #6
 80042ea:	4641      	mov	r1, r8
 80042ec:	1a51      	subs	r1, r2, r1
 80042ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80042f0:	4649      	mov	r1, r9
 80042f2:	eb63 0301 	sbc.w	r3, r3, r1
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004304:	4649      	mov	r1, r9
 8004306:	00cb      	lsls	r3, r1, #3
 8004308:	4641      	mov	r1, r8
 800430a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430e:	4641      	mov	r1, r8
 8004310:	00ca      	lsls	r2, r1, #3
 8004312:	4610      	mov	r0, r2
 8004314:	4619      	mov	r1, r3
 8004316:	4603      	mov	r3, r0
 8004318:	4622      	mov	r2, r4
 800431a:	189b      	adds	r3, r3, r2
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
 800431e:	462b      	mov	r3, r5
 8004320:	460a      	mov	r2, r1
 8004322:	eb42 0303 	adc.w	r3, r2, r3
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004334:	4629      	mov	r1, r5
 8004336:	024b      	lsls	r3, r1, #9
 8004338:	4621      	mov	r1, r4
 800433a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800433e:	4621      	mov	r1, r4
 8004340:	024a      	lsls	r2, r1, #9
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004350:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004354:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004358:	f7fc fc58 	bl	8000c0c <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4613      	mov	r3, r2
 8004362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004366:	e067      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004368:	4b75      	ldr	r3, [pc, #468]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	2200      	movs	r2, #0
 8004370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004374:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800437c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004380:	67bb      	str	r3, [r7, #120]	; 0x78
 8004382:	2300      	movs	r3, #0
 8004384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004386:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	f04f 0000 	mov.w	r0, #0
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	0159      	lsls	r1, r3, #5
 8004398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439c:	0150      	lsls	r0, r2, #5
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4621      	mov	r1, r4
 80043a4:	1a51      	subs	r1, r2, r1
 80043a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80043a8:	4629      	mov	r1, r5
 80043aa:	eb63 0301 	sbc.w	r3, r3, r1
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80043bc:	4649      	mov	r1, r9
 80043be:	018b      	lsls	r3, r1, #6
 80043c0:	4641      	mov	r1, r8
 80043c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c6:	4641      	mov	r1, r8
 80043c8:	018a      	lsls	r2, r1, #6
 80043ca:	4641      	mov	r1, r8
 80043cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80043d0:	4649      	mov	r1, r9
 80043d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ea:	4692      	mov	sl, r2
 80043ec:	469b      	mov	fp, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	eb1a 0303 	adds.w	r3, sl, r3
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	462b      	mov	r3, r5
 80043f8:	eb4b 0303 	adc.w	r3, fp, r3
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800440a:	4629      	mov	r1, r5
 800440c:	028b      	lsls	r3, r1, #10
 800440e:	4621      	mov	r1, r4
 8004410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004414:	4621      	mov	r1, r4
 8004416:	028a      	lsls	r2, r1, #10
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004420:	2200      	movs	r2, #0
 8004422:	673b      	str	r3, [r7, #112]	; 0x70
 8004424:	677a      	str	r2, [r7, #116]	; 0x74
 8004426:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800442a:	f7fc fbef 	bl	8000c0c <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4613      	mov	r3, r2
 8004434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004438:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800444a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800444e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800445a:	e0eb      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800445c:	4b38      	ldr	r3, [pc, #224]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004468:	4b35      	ldr	r3, [pc, #212]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d06b      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCC_GetSysClockFreq+0x354>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	2200      	movs	r2, #0
 800447c:	66bb      	str	r3, [r7, #104]	; 0x68
 800447e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	663b      	str	r3, [r7, #96]	; 0x60
 8004488:	2300      	movs	r3, #0
 800448a:	667b      	str	r3, [r7, #100]	; 0x64
 800448c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	0159      	lsls	r1, r3, #5
 800449e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a2:	0150      	lsls	r0, r2, #5
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4621      	mov	r1, r4
 80044aa:	1a51      	subs	r1, r2, r1
 80044ac:	61b9      	str	r1, [r7, #24]
 80044ae:	4629      	mov	r1, r5
 80044b0:	eb63 0301 	sbc.w	r3, r3, r1
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80044c2:	4659      	mov	r1, fp
 80044c4:	018b      	lsls	r3, r1, #6
 80044c6:	4651      	mov	r1, sl
 80044c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044cc:	4651      	mov	r1, sl
 80044ce:	018a      	lsls	r2, r1, #6
 80044d0:	4651      	mov	r1, sl
 80044d2:	ebb2 0801 	subs.w	r8, r2, r1
 80044d6:	4659      	mov	r1, fp
 80044d8:	eb63 0901 	sbc.w	r9, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f0:	4690      	mov	r8, r2
 80044f2:	4699      	mov	r9, r3
 80044f4:	4623      	mov	r3, r4
 80044f6:	eb18 0303 	adds.w	r3, r8, r3
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	462b      	mov	r3, r5
 80044fe:	eb49 0303 	adc.w	r3, r9, r3
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004510:	4629      	mov	r1, r5
 8004512:	024b      	lsls	r3, r1, #9
 8004514:	4621      	mov	r1, r4
 8004516:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800451a:	4621      	mov	r1, r4
 800451c:	024a      	lsls	r2, r1, #9
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004526:	2200      	movs	r2, #0
 8004528:	65bb      	str	r3, [r7, #88]	; 0x58
 800452a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800452c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004530:	f7fc fb6c 	bl	8000c0c <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4613      	mov	r3, r2
 800453a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800453e:	e065      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x420>
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454c:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <HAL_RCC_GetSysClockFreq+0x458>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	2200      	movs	r2, #0
 8004554:	4618      	mov	r0, r3
 8004556:	4611      	mov	r1, r2
 8004558:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800455c:	653b      	str	r3, [r7, #80]	; 0x50
 800455e:	2300      	movs	r3, #0
 8004560:	657b      	str	r3, [r7, #84]	; 0x54
 8004562:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004566:	4642      	mov	r2, r8
 8004568:	464b      	mov	r3, r9
 800456a:	f04f 0000 	mov.w	r0, #0
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	0159      	lsls	r1, r3, #5
 8004574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004578:	0150      	lsls	r0, r2, #5
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4641      	mov	r1, r8
 8004580:	1a51      	subs	r1, r2, r1
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	4649      	mov	r1, r9
 8004586:	eb63 0301 	sbc.w	r3, r3, r1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004598:	4659      	mov	r1, fp
 800459a:	018b      	lsls	r3, r1, #6
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045a2:	4651      	mov	r1, sl
 80045a4:	018a      	lsls	r2, r1, #6
 80045a6:	4651      	mov	r1, sl
 80045a8:	1a54      	subs	r4, r2, r1
 80045aa:	4659      	mov	r1, fp
 80045ac:	eb63 0501 	sbc.w	r5, r3, r1
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	00eb      	lsls	r3, r5, #3
 80045ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045be:	00e2      	lsls	r2, r4, #3
 80045c0:	4614      	mov	r4, r2
 80045c2:	461d      	mov	r5, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	464b      	mov	r3, r9
 80045cc:	eb45 0303 	adc.w	r3, r5, r3
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045de:	4629      	mov	r1, r5
 80045e0:	028b      	lsls	r3, r1, #10
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045e8:	4621      	mov	r1, r4
 80045ea:	028a      	lsls	r2, r1, #10
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045f4:	2200      	movs	r2, #0
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80045fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045fe:	f7fc fb05 	bl	8000c0c <__aeabi_uldivmod>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4613      	mov	r3, r2
 8004608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <HAL_RCC_GetSysClockFreq+0x458>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	0f1b      	lsrs	r3, r3, #28
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800461a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800461e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004622:	fbb2 f3f3 	udiv	r3, r2, r3
 8004626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800462a:	e003      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_GetSysClockFreq+0x45c>)
 800462e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004638:	4618      	mov	r0, r3
 800463a:	37b8      	adds	r7, #184	; 0xb8
 800463c:	46bd      	mov	sp, r7
 800463e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	00f42400 	.word	0x00f42400

0800464c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e28d      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8083 	beq.w	8004772 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800466c:	4b94      	ldr	r3, [pc, #592]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b04      	cmp	r3, #4
 8004676:	d019      	beq.n	80046ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004678:	4b91      	ldr	r3, [pc, #580]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004680:	2b08      	cmp	r3, #8
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004684:	4b8e      	ldr	r3, [pc, #568]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004690:	d00c      	beq.n	80046ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004692:	4b8b      	ldr	r3, [pc, #556]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d112      	bne.n	80046c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469e:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046aa:	d10b      	bne.n	80046c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	4b84      	ldr	r3, [pc, #528]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05b      	beq.n	8004770 <HAL_RCC_OscConfig+0x124>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d157      	bne.n	8004770 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e25a      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d106      	bne.n	80046dc <HAL_RCC_OscConfig+0x90>
 80046ce:	4b7c      	ldr	r3, [pc, #496]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7b      	ldr	r2, [pc, #492]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e01d      	b.n	8004718 <HAL_RCC_OscConfig+0xcc>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0xb4>
 80046e6:	4b76      	ldr	r3, [pc, #472]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a75      	ldr	r2, [pc, #468]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b73      	ldr	r3, [pc, #460]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a72      	ldr	r2, [pc, #456]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0xcc>
 8004700:	4b6f      	ldr	r3, [pc, #444]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a6e      	ldr	r2, [pc, #440]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a6b      	ldr	r2, [pc, #428]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d013      	beq.n	8004748 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fd fef8 	bl	8002514 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004728:	f7fd fef4 	bl	8002514 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e21f      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0xdc>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fd fee4 	bl	8002514 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004750:	f7fd fee0 	bl	8002514 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e20b      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004762:	4b57      	ldr	r3, [pc, #348]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x104>
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d06f      	beq.n	800485e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800477e:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b00      	cmp	r3, #0
 8004788:	d017      	beq.n	80047ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800478a:	4b4d      	ldr	r3, [pc, #308]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004792:	2b08      	cmp	r3, #8
 8004794:	d105      	bne.n	80047a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d11c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d116      	bne.n	80047e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_RCC_OscConfig+0x186>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e1d3      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4937      	ldr	r1, [pc, #220]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	e03a      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f0:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <HAL_RCC_OscConfig+0x278>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fe8d 	bl	8002514 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fd fe89 	bl	8002514 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1b4      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4925      	ldr	r1, [pc, #148]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
 8004830:	e015      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_RCC_OscConfig+0x278>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd fe6c 	bl	8002514 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004840:	f7fd fe68 	bl	8002514 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e193      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d036      	beq.n	80048d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_RCC_OscConfig+0x27c>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd fe4c 	bl	8002514 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004880:	f7fd fe48 	bl	8002514 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e173      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x234>
 800489e:	e01b      	b.n	80048d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_OscConfig+0x27c>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a6:	f7fd fe35 	bl	8002514 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	e00e      	b.n	80048cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ae:	f7fd fe31 	bl	8002514 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d907      	bls.n	80048cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e15c      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
 80048c0:	40023800 	.word	0x40023800
 80048c4:	42470000 	.word	0x42470000
 80048c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	4b8a      	ldr	r3, [pc, #552]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 80048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ea      	bne.n	80048ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8097 	beq.w	8004a14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ea:	4b83      	ldr	r3, [pc, #524]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	4b7f      	ldr	r3, [pc, #508]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4a7e      	ldr	r2, [pc, #504]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004904:	6413      	str	r3, [r2, #64]	; 0x40
 8004906:	4b7c      	ldr	r3, [pc, #496]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004916:	4b79      	ldr	r3, [pc, #484]	; (8004afc <HAL_RCC_OscConfig+0x4b0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d118      	bne.n	8004954 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004922:	4b76      	ldr	r3, [pc, #472]	; (8004afc <HAL_RCC_OscConfig+0x4b0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a75      	ldr	r2, [pc, #468]	; (8004afc <HAL_RCC_OscConfig+0x4b0>)
 8004928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492e:	f7fd fdf1 	bl	8002514 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004936:	f7fd fded 	bl	8002514 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e118      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004948:	4b6c      	ldr	r3, [pc, #432]	; (8004afc <HAL_RCC_OscConfig+0x4b0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d106      	bne.n	800496a <HAL_RCC_OscConfig+0x31e>
 800495c:	4b66      	ldr	r3, [pc, #408]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a65      	ldr	r2, [pc, #404]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	e01c      	b.n	80049a4 <HAL_RCC_OscConfig+0x358>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b05      	cmp	r3, #5
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0x340>
 8004972:	4b61      	ldr	r3, [pc, #388]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	4a60      	ldr	r2, [pc, #384]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	6713      	str	r3, [r2, #112]	; 0x70
 800497e:	4b5e      	ldr	r3, [pc, #376]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	4a5d      	ldr	r2, [pc, #372]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6713      	str	r3, [r2, #112]	; 0x70
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0x358>
 800498c:	4b5a      	ldr	r3, [pc, #360]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a59      	ldr	r2, [pc, #356]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
 8004998:	4b57      	ldr	r3, [pc, #348]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	4a56      	ldr	r2, [pc, #344]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 800499e:	f023 0304 	bic.w	r3, r3, #4
 80049a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fd fdb2 	bl	8002514 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b4:	f7fd fdae 	bl	8002514 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0d7      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ca:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ee      	beq.n	80049b4 <HAL_RCC_OscConfig+0x368>
 80049d6:	e014      	b.n	8004a02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fd fd9c 	bl	8002514 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd fd98 	bl	8002514 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e0c1      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f6:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1ee      	bne.n	80049e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a08:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80ad 	beq.w	8004b78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a1e:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d060      	beq.n	8004aec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d145      	bne.n	8004abe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a32:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_RCC_OscConfig+0x4b4>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd fd6c 	bl	8002514 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fd fd68 	bl	8002514 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e093      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	3b01      	subs	r3, #1
 8004a78:	041b      	lsls	r3, r3, #16
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	071b      	lsls	r3, r3, #28
 8004a8a:	491b      	ldr	r1, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <HAL_RCC_OscConfig+0x4b4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7fd fd3d 	bl	8002514 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9e:	f7fd fd39 	bl	8002514 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e064      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x452>
 8004abc:	e05c      	b.n	8004b78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_RCC_OscConfig+0x4b4>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fd26 	bl	8002514 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fd fd22 	bl	8002514 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e04d      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCC_OscConfig+0x4ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x480>
 8004aea:	e045      	b.n	8004b78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e040      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40007000 	.word	0x40007000
 8004b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <HAL_RCC_OscConfig+0x538>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d030      	beq.n	8004b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d129      	bne.n	8004b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d122      	bne.n	8004b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d119      	bne.n	8004b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d10f      	bne.n	8004b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800

08004b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e041      	b.n	8004c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fb60 	bl	8002274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fa96 	bl	80050f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e04e      	b.n	8004cde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	; (8004cec <HAL_TIM_Base_Start_IT+0xc4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40010400 	.word	0x40010400
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40001800 	.word	0x40001800

08004d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d122      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d11b      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0202 	mvn.w	r2, #2
 8004d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f9b5 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004d50:	e005      	b.n	8004d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9a7 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f9b8 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d122      	bne.n	8004db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0204 	mvn.w	r2, #4
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f98b 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f97d 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f98e 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0208 	mvn.w	r2, #8
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2204      	movs	r2, #4
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f961 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f953 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f964 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0210 	mvn.w	r2, #16
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2208      	movs	r2, #8
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f937 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f929 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f93a 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0201 	mvn.w	r2, #1
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fcf4 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fae0 	bl	8005478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8ff 	bl	80050e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0220 	mvn.w	r2, #32
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 faaa 	bl	8005464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_ConfigClockSource+0x1c>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0b4      	b.n	800509e <HAL_TIM_ConfigClockSource+0x186>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6c:	d03e      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xd4>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	f200 8087 	bhi.w	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	f000 8086 	beq.w	800508a <HAL_TIM_ConfigClockSource+0x172>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d87f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d01a      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xa6>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d87b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d050      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x11a>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d877      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d03c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xfa>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d873      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d058      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x13a>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d86f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d064      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d86b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d060      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d867      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d05a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	e062      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f000 f9ad 	bl	800532c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	609a      	str	r2, [r3, #8]
      break;
 8004fea:	e04f      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f000 f996 	bl	800532c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500e:	609a      	str	r2, [r3, #8]
      break;
 8005010:	e03c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f000 f90a 	bl	8005238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2150      	movs	r1, #80	; 0x50
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f963 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8005030:	e02c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 f929 	bl	8005296 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2160      	movs	r1, #96	; 0x60
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f953 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8005050:	e01c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	461a      	mov	r2, r3
 8005060:	f000 f8ea 	bl	8005238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f943 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8005070:	e00c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 f93a 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8005082:	e003      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	e000      	b.n	800508c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800508a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a40      	ldr	r2, [pc, #256]	; (800520c <TIM_Base_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3d      	ldr	r2, [pc, #244]	; (8005210 <TIM_Base_SetConfig+0x118>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3c      	ldr	r2, [pc, #240]	; (8005214 <TIM_Base_SetConfig+0x11c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3b      	ldr	r2, [pc, #236]	; (8005218 <TIM_Base_SetConfig+0x120>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3a      	ldr	r2, [pc, #232]	; (800521c <TIM_Base_SetConfig+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2f      	ldr	r2, [pc, #188]	; (800520c <TIM_Base_SetConfig+0x114>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02b      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d027      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <TIM_Base_SetConfig+0x118>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d023      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <TIM_Base_SetConfig+0x11c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01f      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <TIM_Base_SetConfig+0x120>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01b      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a29      	ldr	r2, [pc, #164]	; (800521c <TIM_Base_SetConfig+0x124>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d017      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a28      	ldr	r2, [pc, #160]	; (8005220 <TIM_Base_SetConfig+0x128>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a27      	ldr	r2, [pc, #156]	; (8005224 <TIM_Base_SetConfig+0x12c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00f      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <TIM_Base_SetConfig+0x130>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00b      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a25      	ldr	r2, [pc, #148]	; (800522c <TIM_Base_SetConfig+0x134>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a24      	ldr	r2, [pc, #144]	; (8005230 <TIM_Base_SetConfig+0x138>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <TIM_Base_SetConfig+0x13c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d108      	bne.n	80051bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a0a      	ldr	r2, [pc, #40]	; (800520c <TIM_Base_SetConfig+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0xf8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0c      	ldr	r2, [pc, #48]	; (800521c <TIM_Base_SetConfig+0x124>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d103      	bne.n	80051f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40010400 	.word	0x40010400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800
 800522c:	40001800 	.word	0x40001800
 8005230:	40001c00 	.word	0x40001c00
 8005234:	40002000 	.word	0x40002000

08005238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0201 	bic.w	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 030a 	bic.w	r3, r3, #10
 8005274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0210 	bic.w	r2, r3, #16
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	f043 0307 	orr.w	r3, r3, #7
 8005318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	021a      	lsls	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	431a      	orrs	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4313      	orrs	r3, r2
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e05a      	b.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a21      	ldr	r2, [pc, #132]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d022      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d01d      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1d      	ldr	r2, [pc, #116]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a18      	ldr	r2, [pc, #96]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a17      	ldr	r2, [pc, #92]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10c      	bne.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4313      	orrs	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40010400 	.word	0x40010400
 800545c:	40014000 	.word	0x40014000
 8005460:	40001800 	.word	0x40001800

08005464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e03f      	b.n	800551e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc ff56 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	; 0x24
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f929 	bl	8005728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695a      	ldr	r2, [r3, #20]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b08a      	sub	sp, #40	; 0x28
 800552a:	af02      	add	r7, sp, #8
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b20      	cmp	r3, #32
 8005544:	d17c      	bne.n	8005640 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <HAL_UART_Transmit+0x2c>
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e075      	b.n	8005642 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_UART_Transmit+0x3e>
 8005560:	2302      	movs	r3, #2
 8005562:	e06e      	b.n	8005642 <HAL_UART_Transmit+0x11c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2221      	movs	r2, #33	; 0x21
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800557a:	f7fc ffcb 	bl	8002514 <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	88fa      	ldrh	r2, [r7, #6]
 800558a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005594:	d108      	bne.n	80055a8 <HAL_UART_Transmit+0x82>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	e003      	b.n	80055b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055b8:	e02a      	b.n	8005610 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2200      	movs	r2, #0
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f840 	bl	800564a <UART_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e036      	b.n	8005642 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	3302      	adds	r3, #2
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	e007      	b.n	8005602 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	3301      	adds	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1cf      	bne.n	80055ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2200      	movs	r2, #0
 8005622:	2140      	movs	r1, #64	; 0x40
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f810 	bl	800564a <UART_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b090      	sub	sp, #64	; 0x40
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565a:	e050      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d04c      	beq.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0x30>
 800566a:	f7fc ff53 	bl	8002514 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005676:	429a      	cmp	r2, r3
 8005678:	d241      	bcs.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800569a:	637a      	str	r2, [r7, #52]	; 0x34
 800569c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e5      	bne.n	800567a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3314      	adds	r3, #20
 80056b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	613b      	str	r3, [r7, #16]
   return(result);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3314      	adds	r3, #20
 80056cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ce:	623a      	str	r2, [r7, #32]
 80056d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	61bb      	str	r3, [r7, #24]
   return(result);
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e00f      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4013      	ands	r3, r2
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	429a      	cmp	r2, r3
 800571a:	d09f      	beq.n	800565c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3740      	adds	r7, #64	; 0x40
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b0c0      	sub	sp, #256	; 0x100
 800572e:	af00      	add	r7, sp, #0
 8005730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	68d9      	ldr	r1, [r3, #12]
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	ea40 0301 	orr.w	r3, r0, r1
 8005750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	431a      	orrs	r2, r3
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	431a      	orrs	r2, r3
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005780:	f021 010c 	bic.w	r1, r1, #12
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800578e:	430b      	orrs	r3, r1
 8005790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	6999      	ldr	r1, [r3, #24]
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	ea40 0301 	orr.w	r3, r0, r1
 80057ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b8f      	ldr	r3, [pc, #572]	; (80059f4 <UART_SetConfig+0x2cc>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d005      	beq.n	80057c8 <UART_SetConfig+0xa0>
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b8d      	ldr	r3, [pc, #564]	; (80059f8 <UART_SetConfig+0x2d0>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d104      	bne.n	80057d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fe fcfc 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 80057cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057d0:	e003      	b.n	80057da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057d2:	f7fe fce3 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80057d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	f040 810c 	bne.w	8005a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	65b9      	str	r1, [r7, #88]	; 0x58
 8005802:	415b      	adcs	r3, r3
 8005804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800580a:	4621      	mov	r1, r4
 800580c:	eb12 0801 	adds.w	r8, r2, r1
 8005810:	4629      	mov	r1, r5
 8005812:	eb43 0901 	adc.w	r9, r3, r1
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582a:	4690      	mov	r8, r2
 800582c:	4699      	mov	r9, r3
 800582e:	4623      	mov	r3, r4
 8005830:	eb18 0303 	adds.w	r3, r8, r3
 8005834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005838:	462b      	mov	r3, r5
 800583a:	eb49 0303 	adc.w	r3, r9, r3
 800583e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800584e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005856:	460b      	mov	r3, r1
 8005858:	18db      	adds	r3, r3, r3
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
 800585c:	4613      	mov	r3, r2
 800585e:	eb42 0303 	adc.w	r3, r2, r3
 8005862:	657b      	str	r3, [r7, #84]	; 0x54
 8005864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800586c:	f7fb f9ce 	bl	8000c0c <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4b61      	ldr	r3, [pc, #388]	; (80059fc <UART_SetConfig+0x2d4>)
 8005876:	fba3 2302 	umull	r2, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	011c      	lsls	r4, r3, #4
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800588c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	64b9      	str	r1, [r7, #72]	; 0x48
 8005898:	415b      	adcs	r3, r3
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058a0:	4641      	mov	r1, r8
 80058a2:	eb12 0a01 	adds.w	sl, r2, r1
 80058a6:	4649      	mov	r1, r9
 80058a8:	eb43 0b01 	adc.w	fp, r3, r1
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c0:	4692      	mov	sl, r2
 80058c2:	469b      	mov	fp, r3
 80058c4:	4643      	mov	r3, r8
 80058c6:	eb1a 0303 	adds.w	r3, sl, r3
 80058ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ce:	464b      	mov	r3, r9
 80058d0:	eb4b 0303 	adc.w	r3, fp, r3
 80058d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058ec:	460b      	mov	r3, r1
 80058ee:	18db      	adds	r3, r3, r3
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40
 80058f2:	4613      	mov	r3, r2
 80058f4:	eb42 0303 	adc.w	r3, r2, r3
 80058f8:	647b      	str	r3, [r7, #68]	; 0x44
 80058fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005902:	f7fb f983 	bl	8000c0c <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4611      	mov	r1, r2
 800590c:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <UART_SetConfig+0x2d4>)
 800590e:	fba3 2301 	umull	r2, r3, r3, r1
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	; 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005922:	4b36      	ldr	r3, [pc, #216]	; (80059fc <UART_SetConfig+0x2d4>)
 8005924:	fba3 2302 	umull	r2, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005930:	441c      	add	r4, r3
 8005932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800593c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	1891      	adds	r1, r2, r2
 800594a:	63b9      	str	r1, [r7, #56]	; 0x38
 800594c:	415b      	adcs	r3, r3
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005954:	4641      	mov	r1, r8
 8005956:	1851      	adds	r1, r2, r1
 8005958:	6339      	str	r1, [r7, #48]	; 0x30
 800595a:	4649      	mov	r1, r9
 800595c:	414b      	adcs	r3, r1
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800596c:	4659      	mov	r1, fp
 800596e:	00cb      	lsls	r3, r1, #3
 8005970:	4651      	mov	r1, sl
 8005972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005976:	4651      	mov	r1, sl
 8005978:	00ca      	lsls	r2, r1, #3
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	4603      	mov	r3, r0
 8005980:	4642      	mov	r2, r8
 8005982:	189b      	adds	r3, r3, r2
 8005984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005988:	464b      	mov	r3, r9
 800598a:	460a      	mov	r2, r1
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059be:	f7fb f925 	bl	8000c0c <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <UART_SetConfig+0x2d4>)
 80059c8:	fba3 1302 	umull	r1, r3, r3, r2
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	2164      	movs	r1, #100	; 0x64
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	3332      	adds	r3, #50	; 0x32
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <UART_SetConfig+0x2d4>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	f003 0207 	and.w	r2, r3, #7
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4422      	add	r2, r4
 80059ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059f0:	e105      	b.n	8005bfe <UART_SetConfig+0x4d6>
 80059f2:	bf00      	nop
 80059f4:	40011000 	.word	0x40011000
 80059f8:	40011400 	.word	0x40011400
 80059fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a12:	4642      	mov	r2, r8
 8005a14:	464b      	mov	r3, r9
 8005a16:	1891      	adds	r1, r2, r2
 8005a18:	6239      	str	r1, [r7, #32]
 8005a1a:	415b      	adcs	r3, r3
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a22:	4641      	mov	r1, r8
 8005a24:	1854      	adds	r4, r2, r1
 8005a26:	4649      	mov	r1, r9
 8005a28:	eb43 0501 	adc.w	r5, r3, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	00eb      	lsls	r3, r5, #3
 8005a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3a:	00e2      	lsls	r2, r4, #3
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	461d      	mov	r5, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	18e3      	adds	r3, r4, r3
 8005a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a48:	464b      	mov	r3, r9
 8005a4a:	eb45 0303 	adc.w	r3, r5, r3
 8005a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a6e:	4629      	mov	r1, r5
 8005a70:	008b      	lsls	r3, r1, #2
 8005a72:	4621      	mov	r1, r4
 8005a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a78:	4621      	mov	r1, r4
 8005a7a:	008a      	lsls	r2, r1, #2
 8005a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a80:	f7fb f8c4 	bl	8000c0c <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4b60      	ldr	r3, [pc, #384]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	011c      	lsls	r4, r3, #4
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	61b9      	str	r1, [r7, #24]
 8005aac:	415b      	adcs	r3, r3
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6139      	str	r1, [r7, #16]
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ae8:	464b      	mov	r3, r9
 8005aea:	460a      	mov	r2, r1
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	008b      	lsls	r3, r1, #2
 8005b10:	4641      	mov	r1, r8
 8005b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b16:	4641      	mov	r1, r8
 8005b18:	008a      	lsls	r2, r1, #2
 8005b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b1e:	f7fb f875 	bl	8000c0c <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4b39      	ldr	r3, [pc, #228]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a34      	ldr	r2, [pc, #208]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b46:	441c      	add	r4, r3
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b50:	677a      	str	r2, [r7, #116]	; 0x74
 8005b52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b66:	4641      	mov	r1, r8
 8005b68:	1851      	adds	r1, r2, r1
 8005b6a:	6039      	str	r1, [r7, #0]
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	414b      	adcs	r3, r1
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b7e:	4659      	mov	r1, fp
 8005b80:	00cb      	lsls	r3, r1, #3
 8005b82:	4651      	mov	r1, sl
 8005b84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b88:	4651      	mov	r1, sl
 8005b8a:	00ca      	lsls	r2, r1, #3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	4642      	mov	r2, r8
 8005b94:	189b      	adds	r3, r3, r2
 8005b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b98:	464b      	mov	r3, r9
 8005b9a:	460a      	mov	r2, r1
 8005b9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	663b      	str	r3, [r7, #96]	; 0x60
 8005bac:	667a      	str	r2, [r7, #100]	; 0x64
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005bba:	4649      	mov	r1, r9
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4641      	mov	r1, r8
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bcc:	f7fb f81e 	bl	8000c0c <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	2164      	movs	r1, #100	; 0x64
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	3332      	adds	r3, #50	; 0x32
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005bea:	fba2 2303 	umull	r2, r3, r2, r3
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4422      	add	r2, r4
 8005bfc:	609a      	str	r2, [r3, #8]
}
 8005bfe:	bf00      	nop
 8005c00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c04:	46bd      	mov	sp, r7
 8005c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0a:	bf00      	nop
 8005c0c:	51eb851f 	.word	0x51eb851f

08005c10 <__errno>:
 8005c10:	4b01      	ldr	r3, [pc, #4]	; (8005c18 <__errno+0x8>)
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	2000001c 	.word	0x2000001c

08005c1c <__libc_init_array>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4d0d      	ldr	r5, [pc, #52]	; (8005c54 <__libc_init_array+0x38>)
 8005c20:	4c0d      	ldr	r4, [pc, #52]	; (8005c58 <__libc_init_array+0x3c>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	2600      	movs	r6, #0
 8005c28:	42a6      	cmp	r6, r4
 8005c2a:	d109      	bne.n	8005c40 <__libc_init_array+0x24>
 8005c2c:	4d0b      	ldr	r5, [pc, #44]	; (8005c5c <__libc_init_array+0x40>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	; (8005c60 <__libc_init_array+0x44>)
 8005c30:	f001 fa96 	bl	8007160 <_init>
 8005c34:	1b64      	subs	r4, r4, r5
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	2600      	movs	r6, #0
 8005c3a:	42a6      	cmp	r6, r4
 8005c3c:	d105      	bne.n	8005c4a <__libc_init_array+0x2e>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c44:	4798      	blx	r3
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7ee      	b.n	8005c28 <__libc_init_array+0xc>
 8005c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4e:	4798      	blx	r3
 8005c50:	3601      	adds	r6, #1
 8005c52:	e7f2      	b.n	8005c3a <__libc_init_array+0x1e>
 8005c54:	0800882c 	.word	0x0800882c
 8005c58:	0800882c 	.word	0x0800882c
 8005c5c:	0800882c 	.word	0x0800882c
 8005c60:	08008830 	.word	0x08008830

08005c64 <memset>:
 8005c64:	4402      	add	r2, r0
 8005c66:	4603      	mov	r3, r0
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <memset+0xa>
 8005c6c:	4770      	bx	lr
 8005c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c72:	e7f9      	b.n	8005c68 <memset+0x4>

08005c74 <srand>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <srand+0x44>)
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	b9b3      	cbnz	r3, 8005cae <srand+0x3a>
 8005c80:	2018      	movs	r0, #24
 8005c82:	f000 f8df 	bl	8005e44 <malloc>
 8005c86:	4602      	mov	r2, r0
 8005c88:	63a8      	str	r0, [r5, #56]	; 0x38
 8005c8a:	b920      	cbnz	r0, 8005c96 <srand+0x22>
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <srand+0x48>)
 8005c8e:	480c      	ldr	r0, [pc, #48]	; (8005cc0 <srand+0x4c>)
 8005c90:	2142      	movs	r1, #66	; 0x42
 8005c92:	f000 f895 	bl	8005dc0 <__assert_func>
 8005c96:	490b      	ldr	r1, [pc, #44]	; (8005cc4 <srand+0x50>)
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <srand+0x54>)
 8005c9a:	e9c0 1300 	strd	r1, r3, [r0]
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <srand+0x58>)
 8005ca0:	6083      	str	r3, [r0, #8]
 8005ca2:	230b      	movs	r3, #11
 8005ca4:	8183      	strh	r3, [r0, #12]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	2001      	movs	r0, #1
 8005caa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005cae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	611c      	str	r4, [r3, #16]
 8005cb4:	615a      	str	r2, [r3, #20]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	2000001c 	.word	0x2000001c
 8005cbc:	080086e0 	.word	0x080086e0
 8005cc0:	080086f7 	.word	0x080086f7
 8005cc4:	abcd330e 	.word	0xabcd330e
 8005cc8:	e66d1234 	.word	0xe66d1234
 8005ccc:	0005deec 	.word	0x0005deec

08005cd0 <rand>:
 8005cd0:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <rand+0x5c>)
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	681c      	ldr	r4, [r3, #0]
 8005cd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd8:	b9b3      	cbnz	r3, 8005d08 <rand+0x38>
 8005cda:	2018      	movs	r0, #24
 8005cdc:	f000 f8b2 	bl	8005e44 <malloc>
 8005ce0:	63a0      	str	r0, [r4, #56]	; 0x38
 8005ce2:	b928      	cbnz	r0, 8005cf0 <rand+0x20>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <rand+0x60>)
 8005ce8:	4812      	ldr	r0, [pc, #72]	; (8005d34 <rand+0x64>)
 8005cea:	214e      	movs	r1, #78	; 0x4e
 8005cec:	f000 f868 	bl	8005dc0 <__assert_func>
 8005cf0:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <rand+0x68>)
 8005cf2:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <rand+0x6c>)
 8005cf4:	e9c0 2300 	strd	r2, r3, [r0]
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <rand+0x70>)
 8005cfa:	6083      	str	r3, [r0, #8]
 8005cfc:	230b      	movs	r3, #11
 8005cfe:	8183      	strh	r3, [r0, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	2300      	movs	r3, #0
 8005d04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005d08:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005d0a:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <rand+0x74>)
 8005d0c:	6920      	ldr	r0, [r4, #16]
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	490d      	ldr	r1, [pc, #52]	; (8005d48 <rand+0x78>)
 8005d12:	4342      	muls	r2, r0
 8005d14:	fb01 2203 	mla	r2, r1, r3, r2
 8005d18:	fba0 0101 	umull	r0, r1, r0, r1
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	eb42 0001 	adc.w	r0, r2, r1
 8005d22:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005d26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d2a:	bd10      	pop	{r4, pc}
 8005d2c:	2000001c 	.word	0x2000001c
 8005d30:	080086e0 	.word	0x080086e0
 8005d34:	080086f7 	.word	0x080086f7
 8005d38:	abcd330e 	.word	0xabcd330e
 8005d3c:	e66d1234 	.word	0xe66d1234
 8005d40:	0005deec 	.word	0x0005deec
 8005d44:	5851f42d 	.word	0x5851f42d
 8005d48:	4c957f2d 	.word	0x4c957f2d

08005d4c <siprintf>:
 8005d4c:	b40e      	push	{r1, r2, r3}
 8005d4e:	b500      	push	{lr}
 8005d50:	b09c      	sub	sp, #112	; 0x70
 8005d52:	ab1d      	add	r3, sp, #116	; 0x74
 8005d54:	9002      	str	r0, [sp, #8]
 8005d56:	9006      	str	r0, [sp, #24]
 8005d58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d5c:	4809      	ldr	r0, [pc, #36]	; (8005d84 <siprintf+0x38>)
 8005d5e:	9107      	str	r1, [sp, #28]
 8005d60:	9104      	str	r1, [sp, #16]
 8005d62:	4909      	ldr	r1, [pc, #36]	; (8005d88 <siprintf+0x3c>)
 8005d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d68:	9105      	str	r1, [sp, #20]
 8005d6a:	6800      	ldr	r0, [r0, #0]
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	a902      	add	r1, sp, #8
 8005d70:	f000 f9ac 	bl	80060cc <_svfiprintf_r>
 8005d74:	9b02      	ldr	r3, [sp, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	b01c      	add	sp, #112	; 0x70
 8005d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d80:	b003      	add	sp, #12
 8005d82:	4770      	bx	lr
 8005d84:	2000001c 	.word	0x2000001c
 8005d88:	ffff0208 	.word	0xffff0208

08005d8c <time>:
 8005d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <time+0x30>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	4669      	mov	r1, sp
 8005d94:	4604      	mov	r4, r0
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	f000 f842 	bl	8005e20 <_gettimeofday_r>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	bfbe      	ittt	lt
 8005da0:	f04f 32ff 	movlt.w	r2, #4294967295
 8005da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005da8:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005db0:	b10c      	cbz	r4, 8005db6 <time+0x2a>
 8005db2:	e9c4 0100 	strd	r0, r1, [r4]
 8005db6:	b004      	add	sp, #16
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	2000001c 	.word	0x2000001c

08005dc0 <__assert_func>:
 8005dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dc2:	4614      	mov	r4, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <__assert_func+0x2c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	68d8      	ldr	r0, [r3, #12]
 8005dce:	b14c      	cbz	r4, 8005de4 <__assert_func+0x24>
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <__assert_func+0x30>)
 8005dd2:	9100      	str	r1, [sp, #0]
 8005dd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dd8:	4906      	ldr	r1, [pc, #24]	; (8005df4 <__assert_func+0x34>)
 8005dda:	462b      	mov	r3, r5
 8005ddc:	f000 f80e 	bl	8005dfc <fiprintf>
 8005de0:	f000 fe32 	bl	8006a48 <abort>
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <__assert_func+0x38>)
 8005de6:	461c      	mov	r4, r3
 8005de8:	e7f3      	b.n	8005dd2 <__assert_func+0x12>
 8005dea:	bf00      	nop
 8005dec:	2000001c 	.word	0x2000001c
 8005df0:	08008752 	.word	0x08008752
 8005df4:	0800875f 	.word	0x0800875f
 8005df8:	0800878d 	.word	0x0800878d

08005dfc <fiprintf>:
 8005dfc:	b40e      	push	{r1, r2, r3}
 8005dfe:	b503      	push	{r0, r1, lr}
 8005e00:	4601      	mov	r1, r0
 8005e02:	ab03      	add	r3, sp, #12
 8005e04:	4805      	ldr	r0, [pc, #20]	; (8005e1c <fiprintf+0x20>)
 8005e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e0a:	6800      	ldr	r0, [r0, #0]
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	f000 fa87 	bl	8006320 <_vfiprintf_r>
 8005e12:	b002      	add	sp, #8
 8005e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e18:	b003      	add	sp, #12
 8005e1a:	4770      	bx	lr
 8005e1c:	2000001c 	.word	0x2000001c

08005e20 <_gettimeofday_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	; (8005e40 <_gettimeofday_r+0x20>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	f001 f98f 	bl	8007150 <_gettimeofday>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d102      	bne.n	8005e3c <_gettimeofday_r+0x1c>
 8005e36:	682b      	ldr	r3, [r5, #0]
 8005e38:	b103      	cbz	r3, 8005e3c <_gettimeofday_r+0x1c>
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	2000072c 	.word	0x2000072c

08005e44 <malloc>:
 8005e44:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <malloc+0xc>)
 8005e46:	4601      	mov	r1, r0
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	f000 b86f 	b.w	8005f2c <_malloc_r>
 8005e4e:	bf00      	nop
 8005e50:	2000001c 	.word	0x2000001c

08005e54 <_free_r>:
 8005e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e56:	2900      	cmp	r1, #0
 8005e58:	d044      	beq.n	8005ee4 <_free_r+0x90>
 8005e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e5e:	9001      	str	r0, [sp, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f1a1 0404 	sub.w	r4, r1, #4
 8005e66:	bfb8      	it	lt
 8005e68:	18e4      	addlt	r4, r4, r3
 8005e6a:	f001 f83d 	bl	8006ee8 <__malloc_lock>
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <_free_r+0x94>)
 8005e70:	9801      	ldr	r0, [sp, #4]
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	b933      	cbnz	r3, 8005e84 <_free_r+0x30>
 8005e76:	6063      	str	r3, [r4, #4]
 8005e78:	6014      	str	r4, [r2, #0]
 8005e7a:	b003      	add	sp, #12
 8005e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e80:	f001 b838 	b.w	8006ef4 <__malloc_unlock>
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	d908      	bls.n	8005e9a <_free_r+0x46>
 8005e88:	6825      	ldr	r5, [r4, #0]
 8005e8a:	1961      	adds	r1, r4, r5
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	bf01      	itttt	eq
 8005e90:	6819      	ldreq	r1, [r3, #0]
 8005e92:	685b      	ldreq	r3, [r3, #4]
 8005e94:	1949      	addeq	r1, r1, r5
 8005e96:	6021      	streq	r1, [r4, #0]
 8005e98:	e7ed      	b.n	8005e76 <_free_r+0x22>
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	b10b      	cbz	r3, 8005ea4 <_free_r+0x50>
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d9fa      	bls.n	8005e9a <_free_r+0x46>
 8005ea4:	6811      	ldr	r1, [r2, #0]
 8005ea6:	1855      	adds	r5, r2, r1
 8005ea8:	42a5      	cmp	r5, r4
 8005eaa:	d10b      	bne.n	8005ec4 <_free_r+0x70>
 8005eac:	6824      	ldr	r4, [r4, #0]
 8005eae:	4421      	add	r1, r4
 8005eb0:	1854      	adds	r4, r2, r1
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	6011      	str	r1, [r2, #0]
 8005eb6:	d1e0      	bne.n	8005e7a <_free_r+0x26>
 8005eb8:	681c      	ldr	r4, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	6053      	str	r3, [r2, #4]
 8005ebe:	4421      	add	r1, r4
 8005ec0:	6011      	str	r1, [r2, #0]
 8005ec2:	e7da      	b.n	8005e7a <_free_r+0x26>
 8005ec4:	d902      	bls.n	8005ecc <_free_r+0x78>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	6003      	str	r3, [r0, #0]
 8005eca:	e7d6      	b.n	8005e7a <_free_r+0x26>
 8005ecc:	6825      	ldr	r5, [r4, #0]
 8005ece:	1961      	adds	r1, r4, r5
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	bf04      	itt	eq
 8005ed4:	6819      	ldreq	r1, [r3, #0]
 8005ed6:	685b      	ldreq	r3, [r3, #4]
 8005ed8:	6063      	str	r3, [r4, #4]
 8005eda:	bf04      	itt	eq
 8005edc:	1949      	addeq	r1, r1, r5
 8005ede:	6021      	streq	r1, [r4, #0]
 8005ee0:	6054      	str	r4, [r2, #4]
 8005ee2:	e7ca      	b.n	8005e7a <_free_r+0x26>
 8005ee4:	b003      	add	sp, #12
 8005ee6:	bd30      	pop	{r4, r5, pc}
 8005ee8:	20000724 	.word	0x20000724

08005eec <sbrk_aligned>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	4e0e      	ldr	r6, [pc, #56]	; (8005f28 <sbrk_aligned+0x3c>)
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	6831      	ldr	r1, [r6, #0]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	b911      	cbnz	r1, 8005efe <sbrk_aligned+0x12>
 8005ef8:	f000 fcd6 	bl	80068a8 <_sbrk_r>
 8005efc:	6030      	str	r0, [r6, #0]
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 fcd1 	bl	80068a8 <_sbrk_r>
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	d00a      	beq.n	8005f20 <sbrk_aligned+0x34>
 8005f0a:	1cc4      	adds	r4, r0, #3
 8005f0c:	f024 0403 	bic.w	r4, r4, #3
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d007      	beq.n	8005f24 <sbrk_aligned+0x38>
 8005f14:	1a21      	subs	r1, r4, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 fcc6 	bl	80068a8 <_sbrk_r>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d101      	bne.n	8005f24 <sbrk_aligned+0x38>
 8005f20:	f04f 34ff 	mov.w	r4, #4294967295
 8005f24:	4620      	mov	r0, r4
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	20000728 	.word	0x20000728

08005f2c <_malloc_r>:
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	1ccd      	adds	r5, r1, #3
 8005f32:	f025 0503 	bic.w	r5, r5, #3
 8005f36:	3508      	adds	r5, #8
 8005f38:	2d0c      	cmp	r5, #12
 8005f3a:	bf38      	it	cc
 8005f3c:	250c      	movcc	r5, #12
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	4607      	mov	r7, r0
 8005f42:	db01      	blt.n	8005f48 <_malloc_r+0x1c>
 8005f44:	42a9      	cmp	r1, r5
 8005f46:	d905      	bls.n	8005f54 <_malloc_r+0x28>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	4630      	mov	r0, r6
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f54:	4e2e      	ldr	r6, [pc, #184]	; (8006010 <_malloc_r+0xe4>)
 8005f56:	f000 ffc7 	bl	8006ee8 <__malloc_lock>
 8005f5a:	6833      	ldr	r3, [r6, #0]
 8005f5c:	461c      	mov	r4, r3
 8005f5e:	bb34      	cbnz	r4, 8005fae <_malloc_r+0x82>
 8005f60:	4629      	mov	r1, r5
 8005f62:	4638      	mov	r0, r7
 8005f64:	f7ff ffc2 	bl	8005eec <sbrk_aligned>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	d14d      	bne.n	800600a <_malloc_r+0xde>
 8005f6e:	6834      	ldr	r4, [r6, #0]
 8005f70:	4626      	mov	r6, r4
 8005f72:	2e00      	cmp	r6, #0
 8005f74:	d140      	bne.n	8005ff8 <_malloc_r+0xcc>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	eb04 0803 	add.w	r8, r4, r3
 8005f80:	f000 fc92 	bl	80068a8 <_sbrk_r>
 8005f84:	4580      	cmp	r8, r0
 8005f86:	d13a      	bne.n	8005ffe <_malloc_r+0xd2>
 8005f88:	6821      	ldr	r1, [r4, #0]
 8005f8a:	3503      	adds	r5, #3
 8005f8c:	1a6d      	subs	r5, r5, r1
 8005f8e:	f025 0503 	bic.w	r5, r5, #3
 8005f92:	3508      	adds	r5, #8
 8005f94:	2d0c      	cmp	r5, #12
 8005f96:	bf38      	it	cc
 8005f98:	250c      	movcc	r5, #12
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f7ff ffa5 	bl	8005eec <sbrk_aligned>
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d02b      	beq.n	8005ffe <_malloc_r+0xd2>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	442b      	add	r3, r5
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	e00e      	b.n	8005fcc <_malloc_r+0xa0>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	1b52      	subs	r2, r2, r5
 8005fb2:	d41e      	bmi.n	8005ff2 <_malloc_r+0xc6>
 8005fb4:	2a0b      	cmp	r2, #11
 8005fb6:	d916      	bls.n	8005fe6 <_malloc_r+0xba>
 8005fb8:	1961      	adds	r1, r4, r5
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	6025      	str	r5, [r4, #0]
 8005fbe:	bf18      	it	ne
 8005fc0:	6059      	strne	r1, [r3, #4]
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	bf08      	it	eq
 8005fc6:	6031      	streq	r1, [r6, #0]
 8005fc8:	5162      	str	r2, [r4, r5]
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f104 060b 	add.w	r6, r4, #11
 8005fd2:	f000 ff8f 	bl	8006ef4 <__malloc_unlock>
 8005fd6:	f026 0607 	bic.w	r6, r6, #7
 8005fda:	1d23      	adds	r3, r4, #4
 8005fdc:	1af2      	subs	r2, r6, r3
 8005fde:	d0b6      	beq.n	8005f4e <_malloc_r+0x22>
 8005fe0:	1b9b      	subs	r3, r3, r6
 8005fe2:	50a3      	str	r3, [r4, r2]
 8005fe4:	e7b3      	b.n	8005f4e <_malloc_r+0x22>
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	bf0c      	ite	eq
 8005fec:	6032      	streq	r2, [r6, #0]
 8005fee:	605a      	strne	r2, [r3, #4]
 8005ff0:	e7ec      	b.n	8005fcc <_malloc_r+0xa0>
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	6864      	ldr	r4, [r4, #4]
 8005ff6:	e7b2      	b.n	8005f5e <_malloc_r+0x32>
 8005ff8:	4634      	mov	r4, r6
 8005ffa:	6876      	ldr	r6, [r6, #4]
 8005ffc:	e7b9      	b.n	8005f72 <_malloc_r+0x46>
 8005ffe:	230c      	movs	r3, #12
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4638      	mov	r0, r7
 8006004:	f000 ff76 	bl	8006ef4 <__malloc_unlock>
 8006008:	e7a1      	b.n	8005f4e <_malloc_r+0x22>
 800600a:	6025      	str	r5, [r4, #0]
 800600c:	e7de      	b.n	8005fcc <_malloc_r+0xa0>
 800600e:	bf00      	nop
 8006010:	20000724 	.word	0x20000724

08006014 <__ssputs_r>:
 8006014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	688e      	ldr	r6, [r1, #8]
 800601a:	429e      	cmp	r6, r3
 800601c:	4682      	mov	sl, r0
 800601e:	460c      	mov	r4, r1
 8006020:	4690      	mov	r8, r2
 8006022:	461f      	mov	r7, r3
 8006024:	d838      	bhi.n	8006098 <__ssputs_r+0x84>
 8006026:	898a      	ldrh	r2, [r1, #12]
 8006028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800602c:	d032      	beq.n	8006094 <__ssputs_r+0x80>
 800602e:	6825      	ldr	r5, [r4, #0]
 8006030:	6909      	ldr	r1, [r1, #16]
 8006032:	eba5 0901 	sub.w	r9, r5, r1
 8006036:	6965      	ldr	r5, [r4, #20]
 8006038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800603c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006040:	3301      	adds	r3, #1
 8006042:	444b      	add	r3, r9
 8006044:	106d      	asrs	r5, r5, #1
 8006046:	429d      	cmp	r5, r3
 8006048:	bf38      	it	cc
 800604a:	461d      	movcc	r5, r3
 800604c:	0553      	lsls	r3, r2, #21
 800604e:	d531      	bpl.n	80060b4 <__ssputs_r+0xa0>
 8006050:	4629      	mov	r1, r5
 8006052:	f7ff ff6b 	bl	8005f2c <_malloc_r>
 8006056:	4606      	mov	r6, r0
 8006058:	b950      	cbnz	r0, 8006070 <__ssputs_r+0x5c>
 800605a:	230c      	movs	r3, #12
 800605c:	f8ca 3000 	str.w	r3, [sl]
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	6921      	ldr	r1, [r4, #16]
 8006072:	464a      	mov	r2, r9
 8006074:	f000 ff10 	bl	8006e98 <memcpy>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	6126      	str	r6, [r4, #16]
 8006086:	6165      	str	r5, [r4, #20]
 8006088:	444e      	add	r6, r9
 800608a:	eba5 0509 	sub.w	r5, r5, r9
 800608e:	6026      	str	r6, [r4, #0]
 8006090:	60a5      	str	r5, [r4, #8]
 8006092:	463e      	mov	r6, r7
 8006094:	42be      	cmp	r6, r7
 8006096:	d900      	bls.n	800609a <__ssputs_r+0x86>
 8006098:	463e      	mov	r6, r7
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	4632      	mov	r2, r6
 800609e:	4641      	mov	r1, r8
 80060a0:	f000 ff08 	bl	8006eb4 <memmove>
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	1b9b      	subs	r3, r3, r6
 80060a8:	60a3      	str	r3, [r4, #8]
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	4433      	add	r3, r6
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7db      	b.n	800606c <__ssputs_r+0x58>
 80060b4:	462a      	mov	r2, r5
 80060b6:	f000 ff23 	bl	8006f00 <_realloc_r>
 80060ba:	4606      	mov	r6, r0
 80060bc:	2800      	cmp	r0, #0
 80060be:	d1e1      	bne.n	8006084 <__ssputs_r+0x70>
 80060c0:	6921      	ldr	r1, [r4, #16]
 80060c2:	4650      	mov	r0, sl
 80060c4:	f7ff fec6 	bl	8005e54 <_free_r>
 80060c8:	e7c7      	b.n	800605a <__ssputs_r+0x46>
	...

080060cc <_svfiprintf_r>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	4698      	mov	r8, r3
 80060d2:	898b      	ldrh	r3, [r1, #12]
 80060d4:	061b      	lsls	r3, r3, #24
 80060d6:	b09d      	sub	sp, #116	; 0x74
 80060d8:	4607      	mov	r7, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	4614      	mov	r4, r2
 80060de:	d50e      	bpl.n	80060fe <_svfiprintf_r+0x32>
 80060e0:	690b      	ldr	r3, [r1, #16]
 80060e2:	b963      	cbnz	r3, 80060fe <_svfiprintf_r+0x32>
 80060e4:	2140      	movs	r1, #64	; 0x40
 80060e6:	f7ff ff21 	bl	8005f2c <_malloc_r>
 80060ea:	6028      	str	r0, [r5, #0]
 80060ec:	6128      	str	r0, [r5, #16]
 80060ee:	b920      	cbnz	r0, 80060fa <_svfiprintf_r+0x2e>
 80060f0:	230c      	movs	r3, #12
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e0d1      	b.n	800629e <_svfiprintf_r+0x1d2>
 80060fa:	2340      	movs	r3, #64	; 0x40
 80060fc:	616b      	str	r3, [r5, #20]
 80060fe:	2300      	movs	r3, #0
 8006100:	9309      	str	r3, [sp, #36]	; 0x24
 8006102:	2320      	movs	r3, #32
 8006104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006108:	f8cd 800c 	str.w	r8, [sp, #12]
 800610c:	2330      	movs	r3, #48	; 0x30
 800610e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062b8 <_svfiprintf_r+0x1ec>
 8006112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006116:	f04f 0901 	mov.w	r9, #1
 800611a:	4623      	mov	r3, r4
 800611c:	469a      	mov	sl, r3
 800611e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006122:	b10a      	cbz	r2, 8006128 <_svfiprintf_r+0x5c>
 8006124:	2a25      	cmp	r2, #37	; 0x25
 8006126:	d1f9      	bne.n	800611c <_svfiprintf_r+0x50>
 8006128:	ebba 0b04 	subs.w	fp, sl, r4
 800612c:	d00b      	beq.n	8006146 <_svfiprintf_r+0x7a>
 800612e:	465b      	mov	r3, fp
 8006130:	4622      	mov	r2, r4
 8006132:	4629      	mov	r1, r5
 8006134:	4638      	mov	r0, r7
 8006136:	f7ff ff6d 	bl	8006014 <__ssputs_r>
 800613a:	3001      	adds	r0, #1
 800613c:	f000 80aa 	beq.w	8006294 <_svfiprintf_r+0x1c8>
 8006140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006142:	445a      	add	r2, fp
 8006144:	9209      	str	r2, [sp, #36]	; 0x24
 8006146:	f89a 3000 	ldrb.w	r3, [sl]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80a2 	beq.w	8006294 <_svfiprintf_r+0x1c8>
 8006150:	2300      	movs	r3, #0
 8006152:	f04f 32ff 	mov.w	r2, #4294967295
 8006156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800615a:	f10a 0a01 	add.w	sl, sl, #1
 800615e:	9304      	str	r3, [sp, #16]
 8006160:	9307      	str	r3, [sp, #28]
 8006162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006166:	931a      	str	r3, [sp, #104]	; 0x68
 8006168:	4654      	mov	r4, sl
 800616a:	2205      	movs	r2, #5
 800616c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006170:	4851      	ldr	r0, [pc, #324]	; (80062b8 <_svfiprintf_r+0x1ec>)
 8006172:	f7fa f855 	bl	8000220 <memchr>
 8006176:	9a04      	ldr	r2, [sp, #16]
 8006178:	b9d8      	cbnz	r0, 80061b2 <_svfiprintf_r+0xe6>
 800617a:	06d0      	lsls	r0, r2, #27
 800617c:	bf44      	itt	mi
 800617e:	2320      	movmi	r3, #32
 8006180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006184:	0711      	lsls	r1, r2, #28
 8006186:	bf44      	itt	mi
 8006188:	232b      	movmi	r3, #43	; 0x2b
 800618a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800618e:	f89a 3000 	ldrb.w	r3, [sl]
 8006192:	2b2a      	cmp	r3, #42	; 0x2a
 8006194:	d015      	beq.n	80061c2 <_svfiprintf_r+0xf6>
 8006196:	9a07      	ldr	r2, [sp, #28]
 8006198:	4654      	mov	r4, sl
 800619a:	2000      	movs	r0, #0
 800619c:	f04f 0c0a 	mov.w	ip, #10
 80061a0:	4621      	mov	r1, r4
 80061a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a6:	3b30      	subs	r3, #48	; 0x30
 80061a8:	2b09      	cmp	r3, #9
 80061aa:	d94e      	bls.n	800624a <_svfiprintf_r+0x17e>
 80061ac:	b1b0      	cbz	r0, 80061dc <_svfiprintf_r+0x110>
 80061ae:	9207      	str	r2, [sp, #28]
 80061b0:	e014      	b.n	80061dc <_svfiprintf_r+0x110>
 80061b2:	eba0 0308 	sub.w	r3, r0, r8
 80061b6:	fa09 f303 	lsl.w	r3, r9, r3
 80061ba:	4313      	orrs	r3, r2
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	46a2      	mov	sl, r4
 80061c0:	e7d2      	b.n	8006168 <_svfiprintf_r+0x9c>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	1d19      	adds	r1, r3, #4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	9103      	str	r1, [sp, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bfbb      	ittet	lt
 80061ce:	425b      	neglt	r3, r3
 80061d0:	f042 0202 	orrlt.w	r2, r2, #2
 80061d4:	9307      	strge	r3, [sp, #28]
 80061d6:	9307      	strlt	r3, [sp, #28]
 80061d8:	bfb8      	it	lt
 80061da:	9204      	strlt	r2, [sp, #16]
 80061dc:	7823      	ldrb	r3, [r4, #0]
 80061de:	2b2e      	cmp	r3, #46	; 0x2e
 80061e0:	d10c      	bne.n	80061fc <_svfiprintf_r+0x130>
 80061e2:	7863      	ldrb	r3, [r4, #1]
 80061e4:	2b2a      	cmp	r3, #42	; 0x2a
 80061e6:	d135      	bne.n	8006254 <_svfiprintf_r+0x188>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	1d1a      	adds	r2, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	9203      	str	r2, [sp, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfb8      	it	lt
 80061f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80061f8:	3402      	adds	r4, #2
 80061fa:	9305      	str	r3, [sp, #20]
 80061fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062c8 <_svfiprintf_r+0x1fc>
 8006200:	7821      	ldrb	r1, [r4, #0]
 8006202:	2203      	movs	r2, #3
 8006204:	4650      	mov	r0, sl
 8006206:	f7fa f80b 	bl	8000220 <memchr>
 800620a:	b140      	cbz	r0, 800621e <_svfiprintf_r+0x152>
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	eba0 000a 	sub.w	r0, r0, sl
 8006212:	fa03 f000 	lsl.w	r0, r3, r0
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	4303      	orrs	r3, r0
 800621a:	3401      	adds	r4, #1
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006222:	4826      	ldr	r0, [pc, #152]	; (80062bc <_svfiprintf_r+0x1f0>)
 8006224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006228:	2206      	movs	r2, #6
 800622a:	f7f9 fff9 	bl	8000220 <memchr>
 800622e:	2800      	cmp	r0, #0
 8006230:	d038      	beq.n	80062a4 <_svfiprintf_r+0x1d8>
 8006232:	4b23      	ldr	r3, [pc, #140]	; (80062c0 <_svfiprintf_r+0x1f4>)
 8006234:	bb1b      	cbnz	r3, 800627e <_svfiprintf_r+0x1b2>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	3307      	adds	r3, #7
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	3308      	adds	r3, #8
 8006240:	9303      	str	r3, [sp, #12]
 8006242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006244:	4433      	add	r3, r6
 8006246:	9309      	str	r3, [sp, #36]	; 0x24
 8006248:	e767      	b.n	800611a <_svfiprintf_r+0x4e>
 800624a:	fb0c 3202 	mla	r2, ip, r2, r3
 800624e:	460c      	mov	r4, r1
 8006250:	2001      	movs	r0, #1
 8006252:	e7a5      	b.n	80061a0 <_svfiprintf_r+0xd4>
 8006254:	2300      	movs	r3, #0
 8006256:	3401      	adds	r4, #1
 8006258:	9305      	str	r3, [sp, #20]
 800625a:	4619      	mov	r1, r3
 800625c:	f04f 0c0a 	mov.w	ip, #10
 8006260:	4620      	mov	r0, r4
 8006262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006266:	3a30      	subs	r2, #48	; 0x30
 8006268:	2a09      	cmp	r2, #9
 800626a:	d903      	bls.n	8006274 <_svfiprintf_r+0x1a8>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0c5      	beq.n	80061fc <_svfiprintf_r+0x130>
 8006270:	9105      	str	r1, [sp, #20]
 8006272:	e7c3      	b.n	80061fc <_svfiprintf_r+0x130>
 8006274:	fb0c 2101 	mla	r1, ip, r1, r2
 8006278:	4604      	mov	r4, r0
 800627a:	2301      	movs	r3, #1
 800627c:	e7f0      	b.n	8006260 <_svfiprintf_r+0x194>
 800627e:	ab03      	add	r3, sp, #12
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	462a      	mov	r2, r5
 8006284:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <_svfiprintf_r+0x1f8>)
 8006286:	a904      	add	r1, sp, #16
 8006288:	4638      	mov	r0, r7
 800628a:	f3af 8000 	nop.w
 800628e:	1c42      	adds	r2, r0, #1
 8006290:	4606      	mov	r6, r0
 8006292:	d1d6      	bne.n	8006242 <_svfiprintf_r+0x176>
 8006294:	89ab      	ldrh	r3, [r5, #12]
 8006296:	065b      	lsls	r3, r3, #25
 8006298:	f53f af2c 	bmi.w	80060f4 <_svfiprintf_r+0x28>
 800629c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800629e:	b01d      	add	sp, #116	; 0x74
 80062a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a4:	ab03      	add	r3, sp, #12
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	462a      	mov	r2, r5
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <_svfiprintf_r+0x1f8>)
 80062ac:	a904      	add	r1, sp, #16
 80062ae:	4638      	mov	r0, r7
 80062b0:	f000 f9d4 	bl	800665c <_printf_i>
 80062b4:	e7eb      	b.n	800628e <_svfiprintf_r+0x1c2>
 80062b6:	bf00      	nop
 80062b8:	0800878e 	.word	0x0800878e
 80062bc:	08008798 	.word	0x08008798
 80062c0:	00000000 	.word	0x00000000
 80062c4:	08006015 	.word	0x08006015
 80062c8:	08008794 	.word	0x08008794

080062cc <__sfputc_r>:
 80062cc:	6893      	ldr	r3, [r2, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	b410      	push	{r4}
 80062d4:	6093      	str	r3, [r2, #8]
 80062d6:	da08      	bge.n	80062ea <__sfputc_r+0x1e>
 80062d8:	6994      	ldr	r4, [r2, #24]
 80062da:	42a3      	cmp	r3, r4
 80062dc:	db01      	blt.n	80062e2 <__sfputc_r+0x16>
 80062de:	290a      	cmp	r1, #10
 80062e0:	d103      	bne.n	80062ea <__sfputc_r+0x1e>
 80062e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e6:	f000 baef 	b.w	80068c8 <__swbuf_r>
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	1c58      	adds	r0, r3, #1
 80062ee:	6010      	str	r0, [r2, #0]
 80062f0:	7019      	strb	r1, [r3, #0]
 80062f2:	4608      	mov	r0, r1
 80062f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <__sfputs_r>:
 80062fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fc:	4606      	mov	r6, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	4614      	mov	r4, r2
 8006302:	18d5      	adds	r5, r2, r3
 8006304:	42ac      	cmp	r4, r5
 8006306:	d101      	bne.n	800630c <__sfputs_r+0x12>
 8006308:	2000      	movs	r0, #0
 800630a:	e007      	b.n	800631c <__sfputs_r+0x22>
 800630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006310:	463a      	mov	r2, r7
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ffda 	bl	80062cc <__sfputc_r>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d1f3      	bne.n	8006304 <__sfputs_r+0xa>
 800631c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006320 <_vfiprintf_r>:
 8006320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	460d      	mov	r5, r1
 8006326:	b09d      	sub	sp, #116	; 0x74
 8006328:	4614      	mov	r4, r2
 800632a:	4698      	mov	r8, r3
 800632c:	4606      	mov	r6, r0
 800632e:	b118      	cbz	r0, 8006338 <_vfiprintf_r+0x18>
 8006330:	6983      	ldr	r3, [r0, #24]
 8006332:	b90b      	cbnz	r3, 8006338 <_vfiprintf_r+0x18>
 8006334:	f000 fcaa 	bl	8006c8c <__sinit>
 8006338:	4b89      	ldr	r3, [pc, #548]	; (8006560 <_vfiprintf_r+0x240>)
 800633a:	429d      	cmp	r5, r3
 800633c:	d11b      	bne.n	8006376 <_vfiprintf_r+0x56>
 800633e:	6875      	ldr	r5, [r6, #4]
 8006340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006342:	07d9      	lsls	r1, r3, #31
 8006344:	d405      	bmi.n	8006352 <_vfiprintf_r+0x32>
 8006346:	89ab      	ldrh	r3, [r5, #12]
 8006348:	059a      	lsls	r2, r3, #22
 800634a:	d402      	bmi.n	8006352 <_vfiprintf_r+0x32>
 800634c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800634e:	f000 fd3b 	bl	8006dc8 <__retarget_lock_acquire_recursive>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	071b      	lsls	r3, r3, #28
 8006356:	d501      	bpl.n	800635c <_vfiprintf_r+0x3c>
 8006358:	692b      	ldr	r3, [r5, #16]
 800635a:	b9eb      	cbnz	r3, 8006398 <_vfiprintf_r+0x78>
 800635c:	4629      	mov	r1, r5
 800635e:	4630      	mov	r0, r6
 8006360:	f000 fb04 	bl	800696c <__swsetup_r>
 8006364:	b1c0      	cbz	r0, 8006398 <_vfiprintf_r+0x78>
 8006366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006368:	07dc      	lsls	r4, r3, #31
 800636a:	d50e      	bpl.n	800638a <_vfiprintf_r+0x6a>
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	b01d      	add	sp, #116	; 0x74
 8006372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006376:	4b7b      	ldr	r3, [pc, #492]	; (8006564 <_vfiprintf_r+0x244>)
 8006378:	429d      	cmp	r5, r3
 800637a:	d101      	bne.n	8006380 <_vfiprintf_r+0x60>
 800637c:	68b5      	ldr	r5, [r6, #8]
 800637e:	e7df      	b.n	8006340 <_vfiprintf_r+0x20>
 8006380:	4b79      	ldr	r3, [pc, #484]	; (8006568 <_vfiprintf_r+0x248>)
 8006382:	429d      	cmp	r5, r3
 8006384:	bf08      	it	eq
 8006386:	68f5      	ldreq	r5, [r6, #12]
 8006388:	e7da      	b.n	8006340 <_vfiprintf_r+0x20>
 800638a:	89ab      	ldrh	r3, [r5, #12]
 800638c:	0598      	lsls	r0, r3, #22
 800638e:	d4ed      	bmi.n	800636c <_vfiprintf_r+0x4c>
 8006390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006392:	f000 fd1a 	bl	8006dca <__retarget_lock_release_recursive>
 8006396:	e7e9      	b.n	800636c <_vfiprintf_r+0x4c>
 8006398:	2300      	movs	r3, #0
 800639a:	9309      	str	r3, [sp, #36]	; 0x24
 800639c:	2320      	movs	r3, #32
 800639e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a6:	2330      	movs	r3, #48	; 0x30
 80063a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800656c <_vfiprintf_r+0x24c>
 80063ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063b0:	f04f 0901 	mov.w	r9, #1
 80063b4:	4623      	mov	r3, r4
 80063b6:	469a      	mov	sl, r3
 80063b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063bc:	b10a      	cbz	r2, 80063c2 <_vfiprintf_r+0xa2>
 80063be:	2a25      	cmp	r2, #37	; 0x25
 80063c0:	d1f9      	bne.n	80063b6 <_vfiprintf_r+0x96>
 80063c2:	ebba 0b04 	subs.w	fp, sl, r4
 80063c6:	d00b      	beq.n	80063e0 <_vfiprintf_r+0xc0>
 80063c8:	465b      	mov	r3, fp
 80063ca:	4622      	mov	r2, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	4630      	mov	r0, r6
 80063d0:	f7ff ff93 	bl	80062fa <__sfputs_r>
 80063d4:	3001      	adds	r0, #1
 80063d6:	f000 80aa 	beq.w	800652e <_vfiprintf_r+0x20e>
 80063da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063dc:	445a      	add	r2, fp
 80063de:	9209      	str	r2, [sp, #36]	; 0x24
 80063e0:	f89a 3000 	ldrb.w	r3, [sl]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80a2 	beq.w	800652e <_vfiprintf_r+0x20e>
 80063ea:	2300      	movs	r3, #0
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f4:	f10a 0a01 	add.w	sl, sl, #1
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	9307      	str	r3, [sp, #28]
 80063fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006400:	931a      	str	r3, [sp, #104]	; 0x68
 8006402:	4654      	mov	r4, sl
 8006404:	2205      	movs	r2, #5
 8006406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640a:	4858      	ldr	r0, [pc, #352]	; (800656c <_vfiprintf_r+0x24c>)
 800640c:	f7f9 ff08 	bl	8000220 <memchr>
 8006410:	9a04      	ldr	r2, [sp, #16]
 8006412:	b9d8      	cbnz	r0, 800644c <_vfiprintf_r+0x12c>
 8006414:	06d1      	lsls	r1, r2, #27
 8006416:	bf44      	itt	mi
 8006418:	2320      	movmi	r3, #32
 800641a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800641e:	0713      	lsls	r3, r2, #28
 8006420:	bf44      	itt	mi
 8006422:	232b      	movmi	r3, #43	; 0x2b
 8006424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006428:	f89a 3000 	ldrb.w	r3, [sl]
 800642c:	2b2a      	cmp	r3, #42	; 0x2a
 800642e:	d015      	beq.n	800645c <_vfiprintf_r+0x13c>
 8006430:	9a07      	ldr	r2, [sp, #28]
 8006432:	4654      	mov	r4, sl
 8006434:	2000      	movs	r0, #0
 8006436:	f04f 0c0a 	mov.w	ip, #10
 800643a:	4621      	mov	r1, r4
 800643c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006440:	3b30      	subs	r3, #48	; 0x30
 8006442:	2b09      	cmp	r3, #9
 8006444:	d94e      	bls.n	80064e4 <_vfiprintf_r+0x1c4>
 8006446:	b1b0      	cbz	r0, 8006476 <_vfiprintf_r+0x156>
 8006448:	9207      	str	r2, [sp, #28]
 800644a:	e014      	b.n	8006476 <_vfiprintf_r+0x156>
 800644c:	eba0 0308 	sub.w	r3, r0, r8
 8006450:	fa09 f303 	lsl.w	r3, r9, r3
 8006454:	4313      	orrs	r3, r2
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	46a2      	mov	sl, r4
 800645a:	e7d2      	b.n	8006402 <_vfiprintf_r+0xe2>
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	1d19      	adds	r1, r3, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	9103      	str	r1, [sp, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	bfbb      	ittet	lt
 8006468:	425b      	neglt	r3, r3
 800646a:	f042 0202 	orrlt.w	r2, r2, #2
 800646e:	9307      	strge	r3, [sp, #28]
 8006470:	9307      	strlt	r3, [sp, #28]
 8006472:	bfb8      	it	lt
 8006474:	9204      	strlt	r2, [sp, #16]
 8006476:	7823      	ldrb	r3, [r4, #0]
 8006478:	2b2e      	cmp	r3, #46	; 0x2e
 800647a:	d10c      	bne.n	8006496 <_vfiprintf_r+0x176>
 800647c:	7863      	ldrb	r3, [r4, #1]
 800647e:	2b2a      	cmp	r3, #42	; 0x2a
 8006480:	d135      	bne.n	80064ee <_vfiprintf_r+0x1ce>
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	1d1a      	adds	r2, r3, #4
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	9203      	str	r2, [sp, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	bfb8      	it	lt
 800648e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006492:	3402      	adds	r4, #2
 8006494:	9305      	str	r3, [sp, #20]
 8006496:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800657c <_vfiprintf_r+0x25c>
 800649a:	7821      	ldrb	r1, [r4, #0]
 800649c:	2203      	movs	r2, #3
 800649e:	4650      	mov	r0, sl
 80064a0:	f7f9 febe 	bl	8000220 <memchr>
 80064a4:	b140      	cbz	r0, 80064b8 <_vfiprintf_r+0x198>
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	eba0 000a 	sub.w	r0, r0, sl
 80064ac:	fa03 f000 	lsl.w	r0, r3, r0
 80064b0:	9b04      	ldr	r3, [sp, #16]
 80064b2:	4303      	orrs	r3, r0
 80064b4:	3401      	adds	r4, #1
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064bc:	482c      	ldr	r0, [pc, #176]	; (8006570 <_vfiprintf_r+0x250>)
 80064be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064c2:	2206      	movs	r2, #6
 80064c4:	f7f9 feac 	bl	8000220 <memchr>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d03f      	beq.n	800654c <_vfiprintf_r+0x22c>
 80064cc:	4b29      	ldr	r3, [pc, #164]	; (8006574 <_vfiprintf_r+0x254>)
 80064ce:	bb1b      	cbnz	r3, 8006518 <_vfiprintf_r+0x1f8>
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	3307      	adds	r3, #7
 80064d4:	f023 0307 	bic.w	r3, r3, #7
 80064d8:	3308      	adds	r3, #8
 80064da:	9303      	str	r3, [sp, #12]
 80064dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064de:	443b      	add	r3, r7
 80064e0:	9309      	str	r3, [sp, #36]	; 0x24
 80064e2:	e767      	b.n	80063b4 <_vfiprintf_r+0x94>
 80064e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064e8:	460c      	mov	r4, r1
 80064ea:	2001      	movs	r0, #1
 80064ec:	e7a5      	b.n	800643a <_vfiprintf_r+0x11a>
 80064ee:	2300      	movs	r3, #0
 80064f0:	3401      	adds	r4, #1
 80064f2:	9305      	str	r3, [sp, #20]
 80064f4:	4619      	mov	r1, r3
 80064f6:	f04f 0c0a 	mov.w	ip, #10
 80064fa:	4620      	mov	r0, r4
 80064fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006500:	3a30      	subs	r2, #48	; 0x30
 8006502:	2a09      	cmp	r2, #9
 8006504:	d903      	bls.n	800650e <_vfiprintf_r+0x1ee>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0c5      	beq.n	8006496 <_vfiprintf_r+0x176>
 800650a:	9105      	str	r1, [sp, #20]
 800650c:	e7c3      	b.n	8006496 <_vfiprintf_r+0x176>
 800650e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006512:	4604      	mov	r4, r0
 8006514:	2301      	movs	r3, #1
 8006516:	e7f0      	b.n	80064fa <_vfiprintf_r+0x1da>
 8006518:	ab03      	add	r3, sp, #12
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	462a      	mov	r2, r5
 800651e:	4b16      	ldr	r3, [pc, #88]	; (8006578 <_vfiprintf_r+0x258>)
 8006520:	a904      	add	r1, sp, #16
 8006522:	4630      	mov	r0, r6
 8006524:	f3af 8000 	nop.w
 8006528:	4607      	mov	r7, r0
 800652a:	1c78      	adds	r0, r7, #1
 800652c:	d1d6      	bne.n	80064dc <_vfiprintf_r+0x1bc>
 800652e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006530:	07d9      	lsls	r1, r3, #31
 8006532:	d405      	bmi.n	8006540 <_vfiprintf_r+0x220>
 8006534:	89ab      	ldrh	r3, [r5, #12]
 8006536:	059a      	lsls	r2, r3, #22
 8006538:	d402      	bmi.n	8006540 <_vfiprintf_r+0x220>
 800653a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800653c:	f000 fc45 	bl	8006dca <__retarget_lock_release_recursive>
 8006540:	89ab      	ldrh	r3, [r5, #12]
 8006542:	065b      	lsls	r3, r3, #25
 8006544:	f53f af12 	bmi.w	800636c <_vfiprintf_r+0x4c>
 8006548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800654a:	e711      	b.n	8006370 <_vfiprintf_r+0x50>
 800654c:	ab03      	add	r3, sp, #12
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	462a      	mov	r2, r5
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <_vfiprintf_r+0x258>)
 8006554:	a904      	add	r1, sp, #16
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f880 	bl	800665c <_printf_i>
 800655c:	e7e4      	b.n	8006528 <_vfiprintf_r+0x208>
 800655e:	bf00      	nop
 8006560:	080087e4 	.word	0x080087e4
 8006564:	08008804 	.word	0x08008804
 8006568:	080087c4 	.word	0x080087c4
 800656c:	0800878e 	.word	0x0800878e
 8006570:	08008798 	.word	0x08008798
 8006574:	00000000 	.word	0x00000000
 8006578:	080062fb 	.word	0x080062fb
 800657c:	08008794 	.word	0x08008794

08006580 <_printf_common>:
 8006580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	4616      	mov	r6, r2
 8006586:	4699      	mov	r9, r3
 8006588:	688a      	ldr	r2, [r1, #8]
 800658a:	690b      	ldr	r3, [r1, #16]
 800658c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006590:	4293      	cmp	r3, r2
 8006592:	bfb8      	it	lt
 8006594:	4613      	movlt	r3, r2
 8006596:	6033      	str	r3, [r6, #0]
 8006598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800659c:	4607      	mov	r7, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	b10a      	cbz	r2, 80065a6 <_printf_common+0x26>
 80065a2:	3301      	adds	r3, #1
 80065a4:	6033      	str	r3, [r6, #0]
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	0699      	lsls	r1, r3, #26
 80065aa:	bf42      	ittt	mi
 80065ac:	6833      	ldrmi	r3, [r6, #0]
 80065ae:	3302      	addmi	r3, #2
 80065b0:	6033      	strmi	r3, [r6, #0]
 80065b2:	6825      	ldr	r5, [r4, #0]
 80065b4:	f015 0506 	ands.w	r5, r5, #6
 80065b8:	d106      	bne.n	80065c8 <_printf_common+0x48>
 80065ba:	f104 0a19 	add.w	sl, r4, #25
 80065be:	68e3      	ldr	r3, [r4, #12]
 80065c0:	6832      	ldr	r2, [r6, #0]
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	42ab      	cmp	r3, r5
 80065c6:	dc26      	bgt.n	8006616 <_printf_common+0x96>
 80065c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065cc:	1e13      	subs	r3, r2, #0
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	bf18      	it	ne
 80065d2:	2301      	movne	r3, #1
 80065d4:	0692      	lsls	r2, r2, #26
 80065d6:	d42b      	bmi.n	8006630 <_printf_common+0xb0>
 80065d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d01e      	beq.n	8006624 <_printf_common+0xa4>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	68e5      	ldr	r5, [r4, #12]
 80065ea:	6832      	ldr	r2, [r6, #0]
 80065ec:	f003 0306 	and.w	r3, r3, #6
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	bf08      	it	eq
 80065f4:	1aad      	subeq	r5, r5, r2
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	6922      	ldr	r2, [r4, #16]
 80065fa:	bf0c      	ite	eq
 80065fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006600:	2500      	movne	r5, #0
 8006602:	4293      	cmp	r3, r2
 8006604:	bfc4      	itt	gt
 8006606:	1a9b      	subgt	r3, r3, r2
 8006608:	18ed      	addgt	r5, r5, r3
 800660a:	2600      	movs	r6, #0
 800660c:	341a      	adds	r4, #26
 800660e:	42b5      	cmp	r5, r6
 8006610:	d11a      	bne.n	8006648 <_printf_common+0xc8>
 8006612:	2000      	movs	r0, #0
 8006614:	e008      	b.n	8006628 <_printf_common+0xa8>
 8006616:	2301      	movs	r3, #1
 8006618:	4652      	mov	r2, sl
 800661a:	4649      	mov	r1, r9
 800661c:	4638      	mov	r0, r7
 800661e:	47c0      	blx	r8
 8006620:	3001      	adds	r0, #1
 8006622:	d103      	bne.n	800662c <_printf_common+0xac>
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662c:	3501      	adds	r5, #1
 800662e:	e7c6      	b.n	80065be <_printf_common+0x3e>
 8006630:	18e1      	adds	r1, r4, r3
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	2030      	movs	r0, #48	; 0x30
 8006636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800663a:	4422      	add	r2, r4
 800663c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006644:	3302      	adds	r3, #2
 8006646:	e7c7      	b.n	80065d8 <_printf_common+0x58>
 8006648:	2301      	movs	r3, #1
 800664a:	4622      	mov	r2, r4
 800664c:	4649      	mov	r1, r9
 800664e:	4638      	mov	r0, r7
 8006650:	47c0      	blx	r8
 8006652:	3001      	adds	r0, #1
 8006654:	d0e6      	beq.n	8006624 <_printf_common+0xa4>
 8006656:	3601      	adds	r6, #1
 8006658:	e7d9      	b.n	800660e <_printf_common+0x8e>
	...

0800665c <_printf_i>:
 800665c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	7e0f      	ldrb	r7, [r1, #24]
 8006662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006664:	2f78      	cmp	r7, #120	; 0x78
 8006666:	4691      	mov	r9, r2
 8006668:	4680      	mov	r8, r0
 800666a:	460c      	mov	r4, r1
 800666c:	469a      	mov	sl, r3
 800666e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006672:	d807      	bhi.n	8006684 <_printf_i+0x28>
 8006674:	2f62      	cmp	r7, #98	; 0x62
 8006676:	d80a      	bhi.n	800668e <_printf_i+0x32>
 8006678:	2f00      	cmp	r7, #0
 800667a:	f000 80d8 	beq.w	800682e <_printf_i+0x1d2>
 800667e:	2f58      	cmp	r7, #88	; 0x58
 8006680:	f000 80a3 	beq.w	80067ca <_printf_i+0x16e>
 8006684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800668c:	e03a      	b.n	8006704 <_printf_i+0xa8>
 800668e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006692:	2b15      	cmp	r3, #21
 8006694:	d8f6      	bhi.n	8006684 <_printf_i+0x28>
 8006696:	a101      	add	r1, pc, #4	; (adr r1, 800669c <_printf_i+0x40>)
 8006698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800669c:	080066f5 	.word	0x080066f5
 80066a0:	08006709 	.word	0x08006709
 80066a4:	08006685 	.word	0x08006685
 80066a8:	08006685 	.word	0x08006685
 80066ac:	08006685 	.word	0x08006685
 80066b0:	08006685 	.word	0x08006685
 80066b4:	08006709 	.word	0x08006709
 80066b8:	08006685 	.word	0x08006685
 80066bc:	08006685 	.word	0x08006685
 80066c0:	08006685 	.word	0x08006685
 80066c4:	08006685 	.word	0x08006685
 80066c8:	08006815 	.word	0x08006815
 80066cc:	08006739 	.word	0x08006739
 80066d0:	080067f7 	.word	0x080067f7
 80066d4:	08006685 	.word	0x08006685
 80066d8:	08006685 	.word	0x08006685
 80066dc:	08006837 	.word	0x08006837
 80066e0:	08006685 	.word	0x08006685
 80066e4:	08006739 	.word	0x08006739
 80066e8:	08006685 	.word	0x08006685
 80066ec:	08006685 	.word	0x08006685
 80066f0:	080067ff 	.word	0x080067ff
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	1d1a      	adds	r2, r3, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	602a      	str	r2, [r5, #0]
 80066fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006704:	2301      	movs	r3, #1
 8006706:	e0a3      	b.n	8006850 <_printf_i+0x1f4>
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	6829      	ldr	r1, [r5, #0]
 800670c:	0606      	lsls	r6, r0, #24
 800670e:	f101 0304 	add.w	r3, r1, #4
 8006712:	d50a      	bpl.n	800672a <_printf_i+0xce>
 8006714:	680e      	ldr	r6, [r1, #0]
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	2e00      	cmp	r6, #0
 800671a:	da03      	bge.n	8006724 <_printf_i+0xc8>
 800671c:	232d      	movs	r3, #45	; 0x2d
 800671e:	4276      	negs	r6, r6
 8006720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006724:	485e      	ldr	r0, [pc, #376]	; (80068a0 <_printf_i+0x244>)
 8006726:	230a      	movs	r3, #10
 8006728:	e019      	b.n	800675e <_printf_i+0x102>
 800672a:	680e      	ldr	r6, [r1, #0]
 800672c:	602b      	str	r3, [r5, #0]
 800672e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006732:	bf18      	it	ne
 8006734:	b236      	sxthne	r6, r6
 8006736:	e7ef      	b.n	8006718 <_printf_i+0xbc>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	6820      	ldr	r0, [r4, #0]
 800673c:	1d19      	adds	r1, r3, #4
 800673e:	6029      	str	r1, [r5, #0]
 8006740:	0601      	lsls	r1, r0, #24
 8006742:	d501      	bpl.n	8006748 <_printf_i+0xec>
 8006744:	681e      	ldr	r6, [r3, #0]
 8006746:	e002      	b.n	800674e <_printf_i+0xf2>
 8006748:	0646      	lsls	r6, r0, #25
 800674a:	d5fb      	bpl.n	8006744 <_printf_i+0xe8>
 800674c:	881e      	ldrh	r6, [r3, #0]
 800674e:	4854      	ldr	r0, [pc, #336]	; (80068a0 <_printf_i+0x244>)
 8006750:	2f6f      	cmp	r7, #111	; 0x6f
 8006752:	bf0c      	ite	eq
 8006754:	2308      	moveq	r3, #8
 8006756:	230a      	movne	r3, #10
 8006758:	2100      	movs	r1, #0
 800675a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800675e:	6865      	ldr	r5, [r4, #4]
 8006760:	60a5      	str	r5, [r4, #8]
 8006762:	2d00      	cmp	r5, #0
 8006764:	bfa2      	ittt	ge
 8006766:	6821      	ldrge	r1, [r4, #0]
 8006768:	f021 0104 	bicge.w	r1, r1, #4
 800676c:	6021      	strge	r1, [r4, #0]
 800676e:	b90e      	cbnz	r6, 8006774 <_printf_i+0x118>
 8006770:	2d00      	cmp	r5, #0
 8006772:	d04d      	beq.n	8006810 <_printf_i+0x1b4>
 8006774:	4615      	mov	r5, r2
 8006776:	fbb6 f1f3 	udiv	r1, r6, r3
 800677a:	fb03 6711 	mls	r7, r3, r1, r6
 800677e:	5dc7      	ldrb	r7, [r0, r7]
 8006780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006784:	4637      	mov	r7, r6
 8006786:	42bb      	cmp	r3, r7
 8006788:	460e      	mov	r6, r1
 800678a:	d9f4      	bls.n	8006776 <_printf_i+0x11a>
 800678c:	2b08      	cmp	r3, #8
 800678e:	d10b      	bne.n	80067a8 <_printf_i+0x14c>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	07de      	lsls	r6, r3, #31
 8006794:	d508      	bpl.n	80067a8 <_printf_i+0x14c>
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	6861      	ldr	r1, [r4, #4]
 800679a:	4299      	cmp	r1, r3
 800679c:	bfde      	ittt	le
 800679e:	2330      	movle	r3, #48	; 0x30
 80067a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067a8:	1b52      	subs	r2, r2, r5
 80067aa:	6122      	str	r2, [r4, #16]
 80067ac:	f8cd a000 	str.w	sl, [sp]
 80067b0:	464b      	mov	r3, r9
 80067b2:	aa03      	add	r2, sp, #12
 80067b4:	4621      	mov	r1, r4
 80067b6:	4640      	mov	r0, r8
 80067b8:	f7ff fee2 	bl	8006580 <_printf_common>
 80067bc:	3001      	adds	r0, #1
 80067be:	d14c      	bne.n	800685a <_printf_i+0x1fe>
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	b004      	add	sp, #16
 80067c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ca:	4835      	ldr	r0, [pc, #212]	; (80068a0 <_printf_i+0x244>)
 80067cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067d0:	6829      	ldr	r1, [r5, #0]
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067d8:	6029      	str	r1, [r5, #0]
 80067da:	061d      	lsls	r5, r3, #24
 80067dc:	d514      	bpl.n	8006808 <_printf_i+0x1ac>
 80067de:	07df      	lsls	r7, r3, #31
 80067e0:	bf44      	itt	mi
 80067e2:	f043 0320 	orrmi.w	r3, r3, #32
 80067e6:	6023      	strmi	r3, [r4, #0]
 80067e8:	b91e      	cbnz	r6, 80067f2 <_printf_i+0x196>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	f023 0320 	bic.w	r3, r3, #32
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	2310      	movs	r3, #16
 80067f4:	e7b0      	b.n	8006758 <_printf_i+0xfc>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f043 0320 	orr.w	r3, r3, #32
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	2378      	movs	r3, #120	; 0x78
 8006800:	4828      	ldr	r0, [pc, #160]	; (80068a4 <_printf_i+0x248>)
 8006802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006806:	e7e3      	b.n	80067d0 <_printf_i+0x174>
 8006808:	0659      	lsls	r1, r3, #25
 800680a:	bf48      	it	mi
 800680c:	b2b6      	uxthmi	r6, r6
 800680e:	e7e6      	b.n	80067de <_printf_i+0x182>
 8006810:	4615      	mov	r5, r2
 8006812:	e7bb      	b.n	800678c <_printf_i+0x130>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	6826      	ldr	r6, [r4, #0]
 8006818:	6961      	ldr	r1, [r4, #20]
 800681a:	1d18      	adds	r0, r3, #4
 800681c:	6028      	str	r0, [r5, #0]
 800681e:	0635      	lsls	r5, r6, #24
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	d501      	bpl.n	8006828 <_printf_i+0x1cc>
 8006824:	6019      	str	r1, [r3, #0]
 8006826:	e002      	b.n	800682e <_printf_i+0x1d2>
 8006828:	0670      	lsls	r0, r6, #25
 800682a:	d5fb      	bpl.n	8006824 <_printf_i+0x1c8>
 800682c:	8019      	strh	r1, [r3, #0]
 800682e:	2300      	movs	r3, #0
 8006830:	6123      	str	r3, [r4, #16]
 8006832:	4615      	mov	r5, r2
 8006834:	e7ba      	b.n	80067ac <_printf_i+0x150>
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	1d1a      	adds	r2, r3, #4
 800683a:	602a      	str	r2, [r5, #0]
 800683c:	681d      	ldr	r5, [r3, #0]
 800683e:	6862      	ldr	r2, [r4, #4]
 8006840:	2100      	movs	r1, #0
 8006842:	4628      	mov	r0, r5
 8006844:	f7f9 fcec 	bl	8000220 <memchr>
 8006848:	b108      	cbz	r0, 800684e <_printf_i+0x1f2>
 800684a:	1b40      	subs	r0, r0, r5
 800684c:	6060      	str	r0, [r4, #4]
 800684e:	6863      	ldr	r3, [r4, #4]
 8006850:	6123      	str	r3, [r4, #16]
 8006852:	2300      	movs	r3, #0
 8006854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006858:	e7a8      	b.n	80067ac <_printf_i+0x150>
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	462a      	mov	r2, r5
 800685e:	4649      	mov	r1, r9
 8006860:	4640      	mov	r0, r8
 8006862:	47d0      	blx	sl
 8006864:	3001      	adds	r0, #1
 8006866:	d0ab      	beq.n	80067c0 <_printf_i+0x164>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	079b      	lsls	r3, r3, #30
 800686c:	d413      	bmi.n	8006896 <_printf_i+0x23a>
 800686e:	68e0      	ldr	r0, [r4, #12]
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	4298      	cmp	r0, r3
 8006874:	bfb8      	it	lt
 8006876:	4618      	movlt	r0, r3
 8006878:	e7a4      	b.n	80067c4 <_printf_i+0x168>
 800687a:	2301      	movs	r3, #1
 800687c:	4632      	mov	r2, r6
 800687e:	4649      	mov	r1, r9
 8006880:	4640      	mov	r0, r8
 8006882:	47d0      	blx	sl
 8006884:	3001      	adds	r0, #1
 8006886:	d09b      	beq.n	80067c0 <_printf_i+0x164>
 8006888:	3501      	adds	r5, #1
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	9903      	ldr	r1, [sp, #12]
 800688e:	1a5b      	subs	r3, r3, r1
 8006890:	42ab      	cmp	r3, r5
 8006892:	dcf2      	bgt.n	800687a <_printf_i+0x21e>
 8006894:	e7eb      	b.n	800686e <_printf_i+0x212>
 8006896:	2500      	movs	r5, #0
 8006898:	f104 0619 	add.w	r6, r4, #25
 800689c:	e7f5      	b.n	800688a <_printf_i+0x22e>
 800689e:	bf00      	nop
 80068a0:	0800879f 	.word	0x0800879f
 80068a4:	080087b0 	.word	0x080087b0

080068a8 <_sbrk_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d06      	ldr	r5, [pc, #24]	; (80068c4 <_sbrk_r+0x1c>)
 80068ac:	2300      	movs	r3, #0
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	f7fb fc20 	bl	80020f8 <_sbrk>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_sbrk_r+0x1a>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_sbrk_r+0x1a>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	2000072c 	.word	0x2000072c

080068c8 <__swbuf_r>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	460e      	mov	r6, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	4605      	mov	r5, r0
 80068d0:	b118      	cbz	r0, 80068da <__swbuf_r+0x12>
 80068d2:	6983      	ldr	r3, [r0, #24]
 80068d4:	b90b      	cbnz	r3, 80068da <__swbuf_r+0x12>
 80068d6:	f000 f9d9 	bl	8006c8c <__sinit>
 80068da:	4b21      	ldr	r3, [pc, #132]	; (8006960 <__swbuf_r+0x98>)
 80068dc:	429c      	cmp	r4, r3
 80068de:	d12b      	bne.n	8006938 <__swbuf_r+0x70>
 80068e0:	686c      	ldr	r4, [r5, #4]
 80068e2:	69a3      	ldr	r3, [r4, #24]
 80068e4:	60a3      	str	r3, [r4, #8]
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	071a      	lsls	r2, r3, #28
 80068ea:	d52f      	bpl.n	800694c <__swbuf_r+0x84>
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	b36b      	cbz	r3, 800694c <__swbuf_r+0x84>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	1ac0      	subs	r0, r0, r3
 80068f6:	6963      	ldr	r3, [r4, #20]
 80068f8:	b2f6      	uxtb	r6, r6
 80068fa:	4283      	cmp	r3, r0
 80068fc:	4637      	mov	r7, r6
 80068fe:	dc04      	bgt.n	800690a <__swbuf_r+0x42>
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f92e 	bl	8006b64 <_fflush_r>
 8006908:	bb30      	cbnz	r0, 8006958 <__swbuf_r+0x90>
 800690a:	68a3      	ldr	r3, [r4, #8]
 800690c:	3b01      	subs	r3, #1
 800690e:	60a3      	str	r3, [r4, #8]
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	701e      	strb	r6, [r3, #0]
 8006918:	6963      	ldr	r3, [r4, #20]
 800691a:	3001      	adds	r0, #1
 800691c:	4283      	cmp	r3, r0
 800691e:	d004      	beq.n	800692a <__swbuf_r+0x62>
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	07db      	lsls	r3, r3, #31
 8006924:	d506      	bpl.n	8006934 <__swbuf_r+0x6c>
 8006926:	2e0a      	cmp	r6, #10
 8006928:	d104      	bne.n	8006934 <__swbuf_r+0x6c>
 800692a:	4621      	mov	r1, r4
 800692c:	4628      	mov	r0, r5
 800692e:	f000 f919 	bl	8006b64 <_fflush_r>
 8006932:	b988      	cbnz	r0, 8006958 <__swbuf_r+0x90>
 8006934:	4638      	mov	r0, r7
 8006936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <__swbuf_r+0x9c>)
 800693a:	429c      	cmp	r4, r3
 800693c:	d101      	bne.n	8006942 <__swbuf_r+0x7a>
 800693e:	68ac      	ldr	r4, [r5, #8]
 8006940:	e7cf      	b.n	80068e2 <__swbuf_r+0x1a>
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <__swbuf_r+0xa0>)
 8006944:	429c      	cmp	r4, r3
 8006946:	bf08      	it	eq
 8006948:	68ec      	ldreq	r4, [r5, #12]
 800694a:	e7ca      	b.n	80068e2 <__swbuf_r+0x1a>
 800694c:	4621      	mov	r1, r4
 800694e:	4628      	mov	r0, r5
 8006950:	f000 f80c 	bl	800696c <__swsetup_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	d0cb      	beq.n	80068f0 <__swbuf_r+0x28>
 8006958:	f04f 37ff 	mov.w	r7, #4294967295
 800695c:	e7ea      	b.n	8006934 <__swbuf_r+0x6c>
 800695e:	bf00      	nop
 8006960:	080087e4 	.word	0x080087e4
 8006964:	08008804 	.word	0x08008804
 8006968:	080087c4 	.word	0x080087c4

0800696c <__swsetup_r>:
 800696c:	4b32      	ldr	r3, [pc, #200]	; (8006a38 <__swsetup_r+0xcc>)
 800696e:	b570      	push	{r4, r5, r6, lr}
 8006970:	681d      	ldr	r5, [r3, #0]
 8006972:	4606      	mov	r6, r0
 8006974:	460c      	mov	r4, r1
 8006976:	b125      	cbz	r5, 8006982 <__swsetup_r+0x16>
 8006978:	69ab      	ldr	r3, [r5, #24]
 800697a:	b913      	cbnz	r3, 8006982 <__swsetup_r+0x16>
 800697c:	4628      	mov	r0, r5
 800697e:	f000 f985 	bl	8006c8c <__sinit>
 8006982:	4b2e      	ldr	r3, [pc, #184]	; (8006a3c <__swsetup_r+0xd0>)
 8006984:	429c      	cmp	r4, r3
 8006986:	d10f      	bne.n	80069a8 <__swsetup_r+0x3c>
 8006988:	686c      	ldr	r4, [r5, #4]
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006990:	0719      	lsls	r1, r3, #28
 8006992:	d42c      	bmi.n	80069ee <__swsetup_r+0x82>
 8006994:	06dd      	lsls	r5, r3, #27
 8006996:	d411      	bmi.n	80069bc <__swsetup_r+0x50>
 8006998:	2309      	movs	r3, #9
 800699a:	6033      	str	r3, [r6, #0]
 800699c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	f04f 30ff 	mov.w	r0, #4294967295
 80069a6:	e03e      	b.n	8006a26 <__swsetup_r+0xba>
 80069a8:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <__swsetup_r+0xd4>)
 80069aa:	429c      	cmp	r4, r3
 80069ac:	d101      	bne.n	80069b2 <__swsetup_r+0x46>
 80069ae:	68ac      	ldr	r4, [r5, #8]
 80069b0:	e7eb      	b.n	800698a <__swsetup_r+0x1e>
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <__swsetup_r+0xd8>)
 80069b4:	429c      	cmp	r4, r3
 80069b6:	bf08      	it	eq
 80069b8:	68ec      	ldreq	r4, [r5, #12]
 80069ba:	e7e6      	b.n	800698a <__swsetup_r+0x1e>
 80069bc:	0758      	lsls	r0, r3, #29
 80069be:	d512      	bpl.n	80069e6 <__swsetup_r+0x7a>
 80069c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069c2:	b141      	cbz	r1, 80069d6 <__swsetup_r+0x6a>
 80069c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069c8:	4299      	cmp	r1, r3
 80069ca:	d002      	beq.n	80069d2 <__swsetup_r+0x66>
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff fa41 	bl	8005e54 <_free_r>
 80069d2:	2300      	movs	r3, #0
 80069d4:	6363      	str	r3, [r4, #52]	; 0x34
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	2300      	movs	r3, #0
 80069e0:	6063      	str	r3, [r4, #4]
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	f043 0308 	orr.w	r3, r3, #8
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	b94b      	cbnz	r3, 8006a06 <__swsetup_r+0x9a>
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069fc:	d003      	beq.n	8006a06 <__swsetup_r+0x9a>
 80069fe:	4621      	mov	r1, r4
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 fa09 	bl	8006e18 <__smakebuf_r>
 8006a06:	89a0      	ldrh	r0, [r4, #12]
 8006a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a0c:	f010 0301 	ands.w	r3, r0, #1
 8006a10:	d00a      	beq.n	8006a28 <__swsetup_r+0xbc>
 8006a12:	2300      	movs	r3, #0
 8006a14:	60a3      	str	r3, [r4, #8]
 8006a16:	6963      	ldr	r3, [r4, #20]
 8006a18:	425b      	negs	r3, r3
 8006a1a:	61a3      	str	r3, [r4, #24]
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	b943      	cbnz	r3, 8006a32 <__swsetup_r+0xc6>
 8006a20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a24:	d1ba      	bne.n	800699c <__swsetup_r+0x30>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	0781      	lsls	r1, r0, #30
 8006a2a:	bf58      	it	pl
 8006a2c:	6963      	ldrpl	r3, [r4, #20]
 8006a2e:	60a3      	str	r3, [r4, #8]
 8006a30:	e7f4      	b.n	8006a1c <__swsetup_r+0xb0>
 8006a32:	2000      	movs	r0, #0
 8006a34:	e7f7      	b.n	8006a26 <__swsetup_r+0xba>
 8006a36:	bf00      	nop
 8006a38:	2000001c 	.word	0x2000001c
 8006a3c:	080087e4 	.word	0x080087e4
 8006a40:	08008804 	.word	0x08008804
 8006a44:	080087c4 	.word	0x080087c4

08006a48 <abort>:
 8006a48:	b508      	push	{r3, lr}
 8006a4a:	2006      	movs	r0, #6
 8006a4c:	f000 fab0 	bl	8006fb0 <raise>
 8006a50:	2001      	movs	r0, #1
 8006a52:	f7fb fad9 	bl	8002008 <_exit>
	...

08006a58 <__sflush_r>:
 8006a58:	898a      	ldrh	r2, [r1, #12]
 8006a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	4605      	mov	r5, r0
 8006a60:	0710      	lsls	r0, r2, #28
 8006a62:	460c      	mov	r4, r1
 8006a64:	d458      	bmi.n	8006b18 <__sflush_r+0xc0>
 8006a66:	684b      	ldr	r3, [r1, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	dc05      	bgt.n	8006a78 <__sflush_r+0x20>
 8006a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dc02      	bgt.n	8006a78 <__sflush_r+0x20>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	d0f9      	beq.n	8006a72 <__sflush_r+0x1a>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a84:	682f      	ldr	r7, [r5, #0]
 8006a86:	602b      	str	r3, [r5, #0]
 8006a88:	d032      	beq.n	8006af0 <__sflush_r+0x98>
 8006a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	075a      	lsls	r2, r3, #29
 8006a90:	d505      	bpl.n	8006a9e <__sflush_r+0x46>
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	1ac0      	subs	r0, r0, r3
 8006a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a98:	b10b      	cbz	r3, 8006a9e <__sflush_r+0x46>
 8006a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a9c:	1ac0      	subs	r0, r0, r3
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa4:	6a21      	ldr	r1, [r4, #32]
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	47b0      	blx	r6
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	d106      	bne.n	8006abe <__sflush_r+0x66>
 8006ab0:	6829      	ldr	r1, [r5, #0]
 8006ab2:	291d      	cmp	r1, #29
 8006ab4:	d82c      	bhi.n	8006b10 <__sflush_r+0xb8>
 8006ab6:	4a2a      	ldr	r2, [pc, #168]	; (8006b60 <__sflush_r+0x108>)
 8006ab8:	40ca      	lsrs	r2, r1
 8006aba:	07d6      	lsls	r6, r2, #31
 8006abc:	d528      	bpl.n	8006b10 <__sflush_r+0xb8>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	6062      	str	r2, [r4, #4]
 8006ac2:	04d9      	lsls	r1, r3, #19
 8006ac4:	6922      	ldr	r2, [r4, #16]
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	d504      	bpl.n	8006ad4 <__sflush_r+0x7c>
 8006aca:	1c42      	adds	r2, r0, #1
 8006acc:	d101      	bne.n	8006ad2 <__sflush_r+0x7a>
 8006ace:	682b      	ldr	r3, [r5, #0]
 8006ad0:	b903      	cbnz	r3, 8006ad4 <__sflush_r+0x7c>
 8006ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ad6:	602f      	str	r7, [r5, #0]
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d0ca      	beq.n	8006a72 <__sflush_r+0x1a>
 8006adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	d002      	beq.n	8006aea <__sflush_r+0x92>
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f7ff f9b5 	bl	8005e54 <_free_r>
 8006aea:	2000      	movs	r0, #0
 8006aec:	6360      	str	r0, [r4, #52]	; 0x34
 8006aee:	e7c1      	b.n	8006a74 <__sflush_r+0x1c>
 8006af0:	6a21      	ldr	r1, [r4, #32]
 8006af2:	2301      	movs	r3, #1
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b0      	blx	r6
 8006af8:	1c41      	adds	r1, r0, #1
 8006afa:	d1c7      	bne.n	8006a8c <__sflush_r+0x34>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0c4      	beq.n	8006a8c <__sflush_r+0x34>
 8006b02:	2b1d      	cmp	r3, #29
 8006b04:	d001      	beq.n	8006b0a <__sflush_r+0xb2>
 8006b06:	2b16      	cmp	r3, #22
 8006b08:	d101      	bne.n	8006b0e <__sflush_r+0xb6>
 8006b0a:	602f      	str	r7, [r5, #0]
 8006b0c:	e7b1      	b.n	8006a72 <__sflush_r+0x1a>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	e7ad      	b.n	8006a74 <__sflush_r+0x1c>
 8006b18:	690f      	ldr	r7, [r1, #16]
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	d0a9      	beq.n	8006a72 <__sflush_r+0x1a>
 8006b1e:	0793      	lsls	r3, r2, #30
 8006b20:	680e      	ldr	r6, [r1, #0]
 8006b22:	bf08      	it	eq
 8006b24:	694b      	ldreq	r3, [r1, #20]
 8006b26:	600f      	str	r7, [r1, #0]
 8006b28:	bf18      	it	ne
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	eba6 0807 	sub.w	r8, r6, r7
 8006b30:	608b      	str	r3, [r1, #8]
 8006b32:	f1b8 0f00 	cmp.w	r8, #0
 8006b36:	dd9c      	ble.n	8006a72 <__sflush_r+0x1a>
 8006b38:	6a21      	ldr	r1, [r4, #32]
 8006b3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b3c:	4643      	mov	r3, r8
 8006b3e:	463a      	mov	r2, r7
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b0      	blx	r6
 8006b44:	2800      	cmp	r0, #0
 8006b46:	dc06      	bgt.n	8006b56 <__sflush_r+0xfe>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	e78e      	b.n	8006a74 <__sflush_r+0x1c>
 8006b56:	4407      	add	r7, r0
 8006b58:	eba8 0800 	sub.w	r8, r8, r0
 8006b5c:	e7e9      	b.n	8006b32 <__sflush_r+0xda>
 8006b5e:	bf00      	nop
 8006b60:	20400001 	.word	0x20400001

08006b64 <_fflush_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	690b      	ldr	r3, [r1, #16]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	b913      	cbnz	r3, 8006b74 <_fflush_r+0x10>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	4628      	mov	r0, r5
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	b118      	cbz	r0, 8006b7e <_fflush_r+0x1a>
 8006b76:	6983      	ldr	r3, [r0, #24]
 8006b78:	b90b      	cbnz	r3, 8006b7e <_fflush_r+0x1a>
 8006b7a:	f000 f887 	bl	8006c8c <__sinit>
 8006b7e:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <_fflush_r+0x6c>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	d11b      	bne.n	8006bbc <_fflush_r+0x58>
 8006b84:	686c      	ldr	r4, [r5, #4]
 8006b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0ef      	beq.n	8006b6e <_fflush_r+0xa>
 8006b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b90:	07d0      	lsls	r0, r2, #31
 8006b92:	d404      	bmi.n	8006b9e <_fflush_r+0x3a>
 8006b94:	0599      	lsls	r1, r3, #22
 8006b96:	d402      	bmi.n	8006b9e <_fflush_r+0x3a>
 8006b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9a:	f000 f915 	bl	8006dc8 <__retarget_lock_acquire_recursive>
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	f7ff ff59 	bl	8006a58 <__sflush_r>
 8006ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba8:	07da      	lsls	r2, r3, #31
 8006baa:	4605      	mov	r5, r0
 8006bac:	d4e0      	bmi.n	8006b70 <_fflush_r+0xc>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	059b      	lsls	r3, r3, #22
 8006bb2:	d4dd      	bmi.n	8006b70 <_fflush_r+0xc>
 8006bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb6:	f000 f908 	bl	8006dca <__retarget_lock_release_recursive>
 8006bba:	e7d9      	b.n	8006b70 <_fflush_r+0xc>
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_fflush_r+0x70>)
 8006bbe:	429c      	cmp	r4, r3
 8006bc0:	d101      	bne.n	8006bc6 <_fflush_r+0x62>
 8006bc2:	68ac      	ldr	r4, [r5, #8]
 8006bc4:	e7df      	b.n	8006b86 <_fflush_r+0x22>
 8006bc6:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <_fflush_r+0x74>)
 8006bc8:	429c      	cmp	r4, r3
 8006bca:	bf08      	it	eq
 8006bcc:	68ec      	ldreq	r4, [r5, #12]
 8006bce:	e7da      	b.n	8006b86 <_fflush_r+0x22>
 8006bd0:	080087e4 	.word	0x080087e4
 8006bd4:	08008804 	.word	0x08008804
 8006bd8:	080087c4 	.word	0x080087c4

08006bdc <std>:
 8006bdc:	2300      	movs	r3, #0
 8006bde:	b510      	push	{r4, lr}
 8006be0:	4604      	mov	r4, r0
 8006be2:	e9c0 3300 	strd	r3, r3, [r0]
 8006be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bea:	6083      	str	r3, [r0, #8]
 8006bec:	8181      	strh	r1, [r0, #12]
 8006bee:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf0:	81c2      	strh	r2, [r0, #14]
 8006bf2:	6183      	str	r3, [r0, #24]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	305c      	adds	r0, #92	; 0x5c
 8006bfa:	f7ff f833 	bl	8005c64 <memset>
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <std+0x38>)
 8006c00:	6263      	str	r3, [r4, #36]	; 0x24
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <std+0x3c>)
 8006c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <std+0x40>)
 8006c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <std+0x44>)
 8006c0c:	6224      	str	r4, [r4, #32]
 8006c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	bf00      	nop
 8006c14:	08006fe9 	.word	0x08006fe9
 8006c18:	0800700b 	.word	0x0800700b
 8006c1c:	08007043 	.word	0x08007043
 8006c20:	08007067 	.word	0x08007067

08006c24 <_cleanup_r>:
 8006c24:	4901      	ldr	r1, [pc, #4]	; (8006c2c <_cleanup_r+0x8>)
 8006c26:	f000 b8af 	b.w	8006d88 <_fwalk_reent>
 8006c2a:	bf00      	nop
 8006c2c:	08006b65 	.word	0x08006b65

08006c30 <__sfmoreglue>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	2268      	movs	r2, #104	; 0x68
 8006c34:	1e4d      	subs	r5, r1, #1
 8006c36:	4355      	muls	r5, r2
 8006c38:	460e      	mov	r6, r1
 8006c3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c3e:	f7ff f975 	bl	8005f2c <_malloc_r>
 8006c42:	4604      	mov	r4, r0
 8006c44:	b140      	cbz	r0, 8006c58 <__sfmoreglue+0x28>
 8006c46:	2100      	movs	r1, #0
 8006c48:	e9c0 1600 	strd	r1, r6, [r0]
 8006c4c:	300c      	adds	r0, #12
 8006c4e:	60a0      	str	r0, [r4, #8]
 8006c50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c54:	f7ff f806 	bl	8005c64 <memset>
 8006c58:	4620      	mov	r0, r4
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}

08006c5c <__sfp_lock_acquire>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__sfp_lock_acquire+0x8>)
 8006c5e:	f000 b8b3 	b.w	8006dc8 <__retarget_lock_acquire_recursive>
 8006c62:	bf00      	nop
 8006c64:	20000731 	.word	0x20000731

08006c68 <__sfp_lock_release>:
 8006c68:	4801      	ldr	r0, [pc, #4]	; (8006c70 <__sfp_lock_release+0x8>)
 8006c6a:	f000 b8ae 	b.w	8006dca <__retarget_lock_release_recursive>
 8006c6e:	bf00      	nop
 8006c70:	20000731 	.word	0x20000731

08006c74 <__sinit_lock_acquire>:
 8006c74:	4801      	ldr	r0, [pc, #4]	; (8006c7c <__sinit_lock_acquire+0x8>)
 8006c76:	f000 b8a7 	b.w	8006dc8 <__retarget_lock_acquire_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	20000732 	.word	0x20000732

08006c80 <__sinit_lock_release>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__sinit_lock_release+0x8>)
 8006c82:	f000 b8a2 	b.w	8006dca <__retarget_lock_release_recursive>
 8006c86:	bf00      	nop
 8006c88:	20000732 	.word	0x20000732

08006c8c <__sinit>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	4604      	mov	r4, r0
 8006c90:	f7ff fff0 	bl	8006c74 <__sinit_lock_acquire>
 8006c94:	69a3      	ldr	r3, [r4, #24]
 8006c96:	b11b      	cbz	r3, 8006ca0 <__sinit+0x14>
 8006c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c9c:	f7ff bff0 	b.w	8006c80 <__sinit_lock_release>
 8006ca0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ca4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ca6:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <__sinit+0x68>)
 8006ca8:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <__sinit+0x6c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	bf04      	itt	eq
 8006cb2:	2301      	moveq	r3, #1
 8006cb4:	61a3      	streq	r3, [r4, #24]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 f820 	bl	8006cfc <__sfp>
 8006cbc:	6060      	str	r0, [r4, #4]
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 f81c 	bl	8006cfc <__sfp>
 8006cc4:	60a0      	str	r0, [r4, #8]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f818 	bl	8006cfc <__sfp>
 8006ccc:	2200      	movs	r2, #0
 8006cce:	60e0      	str	r0, [r4, #12]
 8006cd0:	2104      	movs	r1, #4
 8006cd2:	6860      	ldr	r0, [r4, #4]
 8006cd4:	f7ff ff82 	bl	8006bdc <std>
 8006cd8:	68a0      	ldr	r0, [r4, #8]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	2109      	movs	r1, #9
 8006cde:	f7ff ff7d 	bl	8006bdc <std>
 8006ce2:	68e0      	ldr	r0, [r4, #12]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	2112      	movs	r1, #18
 8006ce8:	f7ff ff78 	bl	8006bdc <std>
 8006cec:	2301      	movs	r3, #1
 8006cee:	61a3      	str	r3, [r4, #24]
 8006cf0:	e7d2      	b.n	8006c98 <__sinit+0xc>
 8006cf2:	bf00      	nop
 8006cf4:	080086dc 	.word	0x080086dc
 8006cf8:	08006c25 	.word	0x08006c25

08006cfc <__sfp>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	4607      	mov	r7, r0
 8006d00:	f7ff ffac 	bl	8006c5c <__sfp_lock_acquire>
 8006d04:	4b1e      	ldr	r3, [pc, #120]	; (8006d80 <__sfp+0x84>)
 8006d06:	681e      	ldr	r6, [r3, #0]
 8006d08:	69b3      	ldr	r3, [r6, #24]
 8006d0a:	b913      	cbnz	r3, 8006d12 <__sfp+0x16>
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f7ff ffbd 	bl	8006c8c <__sinit>
 8006d12:	3648      	adds	r6, #72	; 0x48
 8006d14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	d503      	bpl.n	8006d24 <__sfp+0x28>
 8006d1c:	6833      	ldr	r3, [r6, #0]
 8006d1e:	b30b      	cbz	r3, 8006d64 <__sfp+0x68>
 8006d20:	6836      	ldr	r6, [r6, #0]
 8006d22:	e7f7      	b.n	8006d14 <__sfp+0x18>
 8006d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d28:	b9d5      	cbnz	r5, 8006d60 <__sfp+0x64>
 8006d2a:	4b16      	ldr	r3, [pc, #88]	; (8006d84 <__sfp+0x88>)
 8006d2c:	60e3      	str	r3, [r4, #12]
 8006d2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d32:	6665      	str	r5, [r4, #100]	; 0x64
 8006d34:	f000 f847 	bl	8006dc6 <__retarget_lock_init_recursive>
 8006d38:	f7ff ff96 	bl	8006c68 <__sfp_lock_release>
 8006d3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d44:	6025      	str	r5, [r4, #0]
 8006d46:	61a5      	str	r5, [r4, #24]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d50:	f7fe ff88 	bl	8005c64 <memset>
 8006d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d60:	3468      	adds	r4, #104	; 0x68
 8006d62:	e7d9      	b.n	8006d18 <__sfp+0x1c>
 8006d64:	2104      	movs	r1, #4
 8006d66:	4638      	mov	r0, r7
 8006d68:	f7ff ff62 	bl	8006c30 <__sfmoreglue>
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	6030      	str	r0, [r6, #0]
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d1d5      	bne.n	8006d20 <__sfp+0x24>
 8006d74:	f7ff ff78 	bl	8006c68 <__sfp_lock_release>
 8006d78:	230c      	movs	r3, #12
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	e7ee      	b.n	8006d5c <__sfp+0x60>
 8006d7e:	bf00      	nop
 8006d80:	080086dc 	.word	0x080086dc
 8006d84:	ffff0001 	.word	0xffff0001

08006d88 <_fwalk_reent>:
 8006d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	4688      	mov	r8, r1
 8006d90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d94:	2700      	movs	r7, #0
 8006d96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d9a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d9e:	d505      	bpl.n	8006dac <_fwalk_reent+0x24>
 8006da0:	6824      	ldr	r4, [r4, #0]
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	d1f7      	bne.n	8006d96 <_fwalk_reent+0xe>
 8006da6:	4638      	mov	r0, r7
 8006da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dac:	89ab      	ldrh	r3, [r5, #12]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d907      	bls.n	8006dc2 <_fwalk_reent+0x3a>
 8006db2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006db6:	3301      	adds	r3, #1
 8006db8:	d003      	beq.n	8006dc2 <_fwalk_reent+0x3a>
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	47c0      	blx	r8
 8006dc0:	4307      	orrs	r7, r0
 8006dc2:	3568      	adds	r5, #104	; 0x68
 8006dc4:	e7e9      	b.n	8006d9a <_fwalk_reent+0x12>

08006dc6 <__retarget_lock_init_recursive>:
 8006dc6:	4770      	bx	lr

08006dc8 <__retarget_lock_acquire_recursive>:
 8006dc8:	4770      	bx	lr

08006dca <__retarget_lock_release_recursive>:
 8006dca:	4770      	bx	lr

08006dcc <__swhatbuf_r>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	460e      	mov	r6, r1
 8006dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	b096      	sub	sp, #88	; 0x58
 8006dd8:	4614      	mov	r4, r2
 8006dda:	461d      	mov	r5, r3
 8006ddc:	da08      	bge.n	8006df0 <__swhatbuf_r+0x24>
 8006dde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	061a      	lsls	r2, r3, #24
 8006de8:	d410      	bmi.n	8006e0c <__swhatbuf_r+0x40>
 8006dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dee:	e00e      	b.n	8006e0e <__swhatbuf_r+0x42>
 8006df0:	466a      	mov	r2, sp
 8006df2:	f000 f95f 	bl	80070b4 <_fstat_r>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	dbf1      	blt.n	8006dde <__swhatbuf_r+0x12>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e04:	425a      	negs	r2, r3
 8006e06:	415a      	adcs	r2, r3
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	e7ee      	b.n	8006dea <__swhatbuf_r+0x1e>
 8006e0c:	2340      	movs	r3, #64	; 0x40
 8006e0e:	2000      	movs	r0, #0
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	b016      	add	sp, #88	; 0x58
 8006e14:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e18 <__smakebuf_r>:
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e1c:	079d      	lsls	r5, r3, #30
 8006e1e:	4606      	mov	r6, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	d507      	bpl.n	8006e34 <__smakebuf_r+0x1c>
 8006e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	6163      	str	r3, [r4, #20]
 8006e30:	b002      	add	sp, #8
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	ab01      	add	r3, sp, #4
 8006e36:	466a      	mov	r2, sp
 8006e38:	f7ff ffc8 	bl	8006dcc <__swhatbuf_r>
 8006e3c:	9900      	ldr	r1, [sp, #0]
 8006e3e:	4605      	mov	r5, r0
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff f873 	bl	8005f2c <_malloc_r>
 8006e46:	b948      	cbnz	r0, 8006e5c <__smakebuf_r+0x44>
 8006e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4c:	059a      	lsls	r2, r3, #22
 8006e4e:	d4ef      	bmi.n	8006e30 <__smakebuf_r+0x18>
 8006e50:	f023 0303 	bic.w	r3, r3, #3
 8006e54:	f043 0302 	orr.w	r3, r3, #2
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	e7e3      	b.n	8006e24 <__smakebuf_r+0xc>
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <__smakebuf_r+0x7c>)
 8006e5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	6020      	str	r0, [r4, #0]
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	6163      	str	r3, [r4, #20]
 8006e6e:	9b01      	ldr	r3, [sp, #4]
 8006e70:	6120      	str	r0, [r4, #16]
 8006e72:	b15b      	cbz	r3, 8006e8c <__smakebuf_r+0x74>
 8006e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 f92d 	bl	80070d8 <_isatty_r>
 8006e7e:	b128      	cbz	r0, 8006e8c <__smakebuf_r+0x74>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	89a0      	ldrh	r0, [r4, #12]
 8006e8e:	4305      	orrs	r5, r0
 8006e90:	81a5      	strh	r5, [r4, #12]
 8006e92:	e7cd      	b.n	8006e30 <__smakebuf_r+0x18>
 8006e94:	08006c25 	.word	0x08006c25

08006e98 <memcpy>:
 8006e98:	440a      	add	r2, r1
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ea0:	d100      	bne.n	8006ea4 <memcpy+0xc>
 8006ea2:	4770      	bx	lr
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eae:	4291      	cmp	r1, r2
 8006eb0:	d1f9      	bne.n	8006ea6 <memcpy+0xe>
 8006eb2:	bd10      	pop	{r4, pc}

08006eb4 <memmove>:
 8006eb4:	4288      	cmp	r0, r1
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	eb01 0402 	add.w	r4, r1, r2
 8006ebc:	d902      	bls.n	8006ec4 <memmove+0x10>
 8006ebe:	4284      	cmp	r4, r0
 8006ec0:	4623      	mov	r3, r4
 8006ec2:	d807      	bhi.n	8006ed4 <memmove+0x20>
 8006ec4:	1e43      	subs	r3, r0, #1
 8006ec6:	42a1      	cmp	r1, r4
 8006ec8:	d008      	beq.n	8006edc <memmove+0x28>
 8006eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ed2:	e7f8      	b.n	8006ec6 <memmove+0x12>
 8006ed4:	4402      	add	r2, r0
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	428a      	cmp	r2, r1
 8006eda:	d100      	bne.n	8006ede <memmove+0x2a>
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ee6:	e7f7      	b.n	8006ed8 <memmove+0x24>

08006ee8 <__malloc_lock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_lock+0x8>)
 8006eea:	f7ff bf6d 	b.w	8006dc8 <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20000730 	.word	0x20000730

08006ef4 <__malloc_unlock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_unlock+0x8>)
 8006ef6:	f7ff bf68 	b.w	8006dca <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	20000730 	.word	0x20000730

08006f00 <_realloc_r>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4680      	mov	r8, r0
 8006f06:	4614      	mov	r4, r2
 8006f08:	460e      	mov	r6, r1
 8006f0a:	b921      	cbnz	r1, 8006f16 <_realloc_r+0x16>
 8006f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f10:	4611      	mov	r1, r2
 8006f12:	f7ff b80b 	b.w	8005f2c <_malloc_r>
 8006f16:	b92a      	cbnz	r2, 8006f24 <_realloc_r+0x24>
 8006f18:	f7fe ff9c 	bl	8005e54 <_free_r>
 8006f1c:	4625      	mov	r5, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	f000 f8fa 	bl	800711c <_malloc_usable_size_r>
 8006f28:	4284      	cmp	r4, r0
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	d802      	bhi.n	8006f34 <_realloc_r+0x34>
 8006f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f32:	d812      	bhi.n	8006f5a <_realloc_r+0x5a>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4640      	mov	r0, r8
 8006f38:	f7fe fff8 	bl	8005f2c <_malloc_r>
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0ed      	beq.n	8006f1e <_realloc_r+0x1e>
 8006f42:	42bc      	cmp	r4, r7
 8006f44:	4622      	mov	r2, r4
 8006f46:	4631      	mov	r1, r6
 8006f48:	bf28      	it	cs
 8006f4a:	463a      	movcs	r2, r7
 8006f4c:	f7ff ffa4 	bl	8006e98 <memcpy>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7fe ff7e 	bl	8005e54 <_free_r>
 8006f58:	e7e1      	b.n	8006f1e <_realloc_r+0x1e>
 8006f5a:	4635      	mov	r5, r6
 8006f5c:	e7df      	b.n	8006f1e <_realloc_r+0x1e>

08006f5e <_raise_r>:
 8006f5e:	291f      	cmp	r1, #31
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4604      	mov	r4, r0
 8006f64:	460d      	mov	r5, r1
 8006f66:	d904      	bls.n	8006f72 <_raise_r+0x14>
 8006f68:	2316      	movs	r3, #22
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	bd38      	pop	{r3, r4, r5, pc}
 8006f72:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f74:	b112      	cbz	r2, 8006f7c <_raise_r+0x1e>
 8006f76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f7a:	b94b      	cbnz	r3, 8006f90 <_raise_r+0x32>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 f831 	bl	8006fe4 <_getpid_r>
 8006f82:	462a      	mov	r2, r5
 8006f84:	4601      	mov	r1, r0
 8006f86:	4620      	mov	r0, r4
 8006f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f8c:	f000 b818 	b.w	8006fc0 <_kill_r>
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d00a      	beq.n	8006faa <_raise_r+0x4c>
 8006f94:	1c59      	adds	r1, r3, #1
 8006f96:	d103      	bne.n	8006fa0 <_raise_r+0x42>
 8006f98:	2316      	movs	r3, #22
 8006f9a:	6003      	str	r3, [r0, #0]
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	e7e7      	b.n	8006f70 <_raise_r+0x12>
 8006fa0:	2400      	movs	r4, #0
 8006fa2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	4798      	blx	r3
 8006faa:	2000      	movs	r0, #0
 8006fac:	e7e0      	b.n	8006f70 <_raise_r+0x12>
	...

08006fb0 <raise>:
 8006fb0:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <raise+0xc>)
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	f7ff bfd2 	b.w	8006f5e <_raise_r>
 8006fba:	bf00      	nop
 8006fbc:	2000001c 	.word	0x2000001c

08006fc0 <_kill_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d07      	ldr	r5, [pc, #28]	; (8006fe0 <_kill_r+0x20>)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	4611      	mov	r1, r2
 8006fcc:	602b      	str	r3, [r5, #0]
 8006fce:	f7fb f80b 	bl	8001fe8 <_kill>
 8006fd2:	1c43      	adds	r3, r0, #1
 8006fd4:	d102      	bne.n	8006fdc <_kill_r+0x1c>
 8006fd6:	682b      	ldr	r3, [r5, #0]
 8006fd8:	b103      	cbz	r3, 8006fdc <_kill_r+0x1c>
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
 8006fde:	bf00      	nop
 8006fe0:	2000072c 	.word	0x2000072c

08006fe4 <_getpid_r>:
 8006fe4:	f7fa bff8 	b.w	8001fd8 <_getpid>

08006fe8 <__sread>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	460c      	mov	r4, r1
 8006fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff0:	f000 f89c 	bl	800712c <_read_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	bfab      	itete	ge
 8006ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8006ffc:	181b      	addge	r3, r3, r0
 8006ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007002:	bfac      	ite	ge
 8007004:	6563      	strge	r3, [r4, #84]	; 0x54
 8007006:	81a3      	strhlt	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__swrite>:
 800700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700e:	461f      	mov	r7, r3
 8007010:	898b      	ldrh	r3, [r1, #12]
 8007012:	05db      	lsls	r3, r3, #23
 8007014:	4605      	mov	r5, r0
 8007016:	460c      	mov	r4, r1
 8007018:	4616      	mov	r6, r2
 800701a:	d505      	bpl.n	8007028 <__swrite+0x1e>
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	2302      	movs	r3, #2
 8007022:	2200      	movs	r2, #0
 8007024:	f000 f868 	bl	80070f8 <_lseek_r>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800702e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007032:	81a3      	strh	r3, [r4, #12]
 8007034:	4632      	mov	r2, r6
 8007036:	463b      	mov	r3, r7
 8007038:	4628      	mov	r0, r5
 800703a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	f000 b817 	b.w	8007070 <_write_r>

08007042 <__sseek>:
 8007042:	b510      	push	{r4, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704a:	f000 f855 	bl	80070f8 <_lseek_r>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	bf15      	itete	ne
 8007054:	6560      	strne	r0, [r4, #84]	; 0x54
 8007056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800705a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800705e:	81a3      	strheq	r3, [r4, #12]
 8007060:	bf18      	it	ne
 8007062:	81a3      	strhne	r3, [r4, #12]
 8007064:	bd10      	pop	{r4, pc}

08007066 <__sclose>:
 8007066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706a:	f000 b813 	b.w	8007094 <_close_r>
	...

08007070 <_write_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d07      	ldr	r5, [pc, #28]	; (8007090 <_write_r+0x20>)
 8007074:	4604      	mov	r4, r0
 8007076:	4608      	mov	r0, r1
 8007078:	4611      	mov	r1, r2
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fa ffe9 	bl	8002056 <_write>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_write_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_write_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	2000072c 	.word	0x2000072c

08007094 <_close_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d06      	ldr	r5, [pc, #24]	; (80070b0 <_close_r+0x1c>)
 8007098:	2300      	movs	r3, #0
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	602b      	str	r3, [r5, #0]
 80070a0:	f7fa fff5 	bl	800208e <_close>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_close_r+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_close_r+0x1a>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	2000072c 	.word	0x2000072c

080070b4 <_fstat_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4d07      	ldr	r5, [pc, #28]	; (80070d4 <_fstat_r+0x20>)
 80070b8:	2300      	movs	r3, #0
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	f7fa fff0 	bl	80020a6 <_fstat>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d102      	bne.n	80070d0 <_fstat_r+0x1c>
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	b103      	cbz	r3, 80070d0 <_fstat_r+0x1c>
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	bd38      	pop	{r3, r4, r5, pc}
 80070d2:	bf00      	nop
 80070d4:	2000072c 	.word	0x2000072c

080070d8 <_isatty_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d06      	ldr	r5, [pc, #24]	; (80070f4 <_isatty_r+0x1c>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	602b      	str	r3, [r5, #0]
 80070e4:	f7fa ffef 	bl	80020c6 <_isatty>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_isatty_r+0x1a>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_isatty_r+0x1a>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	2000072c 	.word	0x2000072c

080070f8 <_lseek_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4d07      	ldr	r5, [pc, #28]	; (8007118 <_lseek_r+0x20>)
 80070fc:	4604      	mov	r4, r0
 80070fe:	4608      	mov	r0, r1
 8007100:	4611      	mov	r1, r2
 8007102:	2200      	movs	r2, #0
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f7fa ffe8 	bl	80020dc <_lseek>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_lseek_r+0x1e>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_lseek_r+0x1e>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	2000072c 	.word	0x2000072c

0800711c <_malloc_usable_size_r>:
 800711c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007120:	1f18      	subs	r0, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfbc      	itt	lt
 8007126:	580b      	ldrlt	r3, [r1, r0]
 8007128:	18c0      	addlt	r0, r0, r3
 800712a:	4770      	bx	lr

0800712c <_read_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d07      	ldr	r5, [pc, #28]	; (800714c <_read_r+0x20>)
 8007130:	4604      	mov	r4, r0
 8007132:	4608      	mov	r0, r1
 8007134:	4611      	mov	r1, r2
 8007136:	2200      	movs	r2, #0
 8007138:	602a      	str	r2, [r5, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f7fa ff6e 	bl	800201c <_read>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_read_r+0x1e>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_read_r+0x1e>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	2000072c 	.word	0x2000072c

08007150 <_gettimeofday>:
 8007150:	4b02      	ldr	r3, [pc, #8]	; (800715c <_gettimeofday+0xc>)
 8007152:	2258      	movs	r2, #88	; 0x58
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	f04f 30ff 	mov.w	r0, #4294967295
 800715a:	4770      	bx	lr
 800715c:	2000072c 	.word	0x2000072c

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
